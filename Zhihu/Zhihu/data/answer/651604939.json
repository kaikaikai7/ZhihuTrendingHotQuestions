[
    {
        "answer_id": 3471878553,
        "content": "在过去的几个月里，有大量的 KOL 都在说：所有的应用都可以用 AI 重写一遍。而落地到现有的 DevOps 工具里，假设都需要重写，那么未来的架构可能是怎样的？对于程序员而言，在 AI 2.0 时代，我们将迎来新的机遇、新的挑战，它可以划分三部分：如何使用 LLM、构建 LLM、创建端到端 LLM。AI 端到端应用。即直接面向最终用户的应用（含专有模型），诸如 ChatGPT、Midjourney应用 + 闭源基础模型。如基于 OpenAI、文心一言（他们提供了吗，我没收到）等 API 来构建应用。应用 + 专有模型。即基于开源基础模型，或者自有的模型，来构建端到端应用。应用 + 微调模型。基于开源模型 + 面向自己研发场景下来微调，以构建领域特定的应用。对应的我们需要三种不同的能力，转化而来便是：基础篇：充分运用 LLM 能力 Prompt 编写：Prompt 学习与编写模式Prompt 管理：Prompt 即代码进阶篇：LLM 下的软件开发工序及应用架构设计 新的交互设计：Chat模式大模型友好的工序架构设计的新变化应用篇：面向特定场景的 LLM 应用 特定场景的模型微调 + LLMOps上下文工程（prompt 工程）：LLM 应用的核心而随着 AI 技术的进一步演进和应用，会出现更多新的变化，诸如于早先我们设计的 Unit Mesh 架构，会带来全新的架构与编程体验。基于我们先前的两个假设：每个大型企业都将有私有化的大语言模型。私有化的主流方式：开源 LLM + 微调。基于此，越来越多的企业将构建围绕于 LLM 的应用，而这些应用在当前以辅助人类设计为主。未来，我们将保持一种观点：LLM as Member，即 LLM 应该是我们的伙伴，而不再是一个辅助的工具。基础篇：充分运用 LLM 能力我们将迎来 AI 原生程序员的时代。几年以后，新一代的程序员，将是 AI 原生的程序员。新生代的程序所具备的能力，将与我们的能力有巨大的区别。在云原生时代里，云原生程序员，不需要具备大量的 ops 相关的技能，他们更关注于如何采用类似于 DDD 这样的策略来合理划分模块。从未来出发，作为“老一代程序员“的我们，需要强化我们运用大语言模型的能力，诸如于 Prompt 能力。1.1 Prompt 编写：Prompt 学习与编写模式今年 2 月，我基于我擅长的编程、绘画、写作展开的 AI 探索和总结，我编写了两篇文章《理解 Prompt》、《Prompt 编写模式 》受到了非常大的关注，GitHub 上的 stars 都超过了 2000。如何编写、调度与逆向工程 Prompt ？将会是现阶段程序员要面临的第一个挑战，我们需要实践的三个问题：提出问题的策略创造性地利用模型回答提高模型输出质量的技巧究其原因，不仅是我们日常工作需要用到 prompt，开始工具的时候，我们也有大量的工作在编写 prompt 上。除此，还需要寻找一种合适的方式，以让 LLM 输出的结果趋于稳定。所以，作为一个经典软件开发时代的程序员，我们应该学习如何摸清 LLM 的脾气？学习如何编写恰到好处的 prompt。1.2 Prompt 管理：Prompt 即代码今年 3 月，基于我们结合 LLM + SDLC 的探索，得到的第一个有价值的观点是《Prompt 即代码：设计和管理 AI 编程的最佳实践 》。于是，基于这个思想，我们构建了我们在 LLM 时代的第一个开源项目：ClickPrompt。ClickPrompt 站在了未来企业需要的三个基本出发点：如何学习 prompt 的编写？如何分享企业内的 prompt 经验？如何将 prompt 结合到工作流中？而在我第一次将注释加入到 ClickPrompt 中的时候，我犹豫了很久。过去的经典编程范式，并不允许将思考过程作为注释到其中。而在未来，我们就会遇到 Prompt 即注释、Prompt 即接口、Prompt 即代码。所以，将 prompt 视为代码，以更好的管理 prompt，将它与我们的软件开发生命周期结合，将是作为经典程序员要考虑的点。除此，我们还需要考虑：版本控制与协作用于测试和调试的工具适用于不同 LLM 的 prompt 接口模式我们也可以让 LLM 来告诉我们答案，只是它可能没有这样的创新能力。应用篇：LLM 下的应用架构设计未来的 AI 编程模式是什么？在那篇《未来可期的 AI 编程 》文章里，可以看到几个基本的思考：Prompt 即是代码，代码不再是代码？现有的编程体系适合于 AI 编程吗？Serverless 会是结合 AI 编程的答案吗？需求详细化会成为你的新瓶颈吗？对于它的思考，促使我设计了 Unit Mesh 架构，详细见《渐近式 AI 编程模式：Unit Mesh 架构的设计思路与探索》。除了新的架构模式本身，我们还面临一个挑战：在现有的 LLM 下，我们应该如何设计应用架构？2.1 新的交互设计：Chat 模式在习惯了 ChatGPT 之后，Chat 模式作为基础的 LLM 元素加入了 UI 设计中。诸如于不那么好用的 New Bing，已经可以帮你总结一下相关的链接，虽然不可靠，但是大家都认可了。所以，无论是我们构建的 ClickPrompt，还是 AutoDev 这样的 IDE 辅助编程插件，都将 Chat 作为基础的 UI 模式加入到了系统。而在 LangChain 的文档中，我们又会看到新一代的框架、工具文档模式，文档作为外挂的知识库，可以直接让开发人员通过对话来学习，并编写一些示例代码。就这一点而言，它大大改善了过去那不太好友好的文档体验。所以，对于开发前端框架的人来说，这又带来了新的 KPI 机会。毕竟，谁会拒绝这么一个有挑战性的东西。另外一个点是，构建一个不同语言的 LangChain，经典企业的技术架构都优先考虑 JVM。2.2 新的工序：大模型友好的流程基于上述的新交互方式，现有的每一个应用都可能被重写。所以，我们开始探索对于软件开发的改变，也就有了 QCon 上的《探索软件开发新工序：LLM 赋能研发效能提升》。对于当前的 AI 应用来说，主要有三种模式：直接 prompt 模式、知识外挂、微调。模型 1：直接 prompt。即 API + prompt 直接接入现有的流程中，以性价比最高的方式提效。。模式 2：知识外挂。简单来说，就是采用 LangChain 这样的动态 prompt 工具，以根据用户的不同输入，来动态生成 prompt。又或者是，在本地采用相关性模型与算法，优化 prompt。模式 3：微调 —— 领域知识强化。即通过微调的方式，来让输出结果更适合于现有的工具与流程。不同的模式之下，带给开发人员的挑战也是不一样的，依旧是由易到难。而其中的核心点是：寻找一种合理的 DSL（领域特定语言），以将现有的流程结合到 LLM。2.3 架构设计的新变化随着，越来越多的大语言模型有了自己的类似 LangChain 工具（如 ChatGLM-LangChain）、越来越多的编程语言社区出了自己版本的 LangChain 版本（如 LangChain Go）。现有的软件架构又加来了一些新的变化：插件化与智能体（Agent）。诸如于 ChatGPT Plugin、LangChain 便是采用智能体 + 插件化的方式，大大方便我们构建基于 LLM 的应用扩展，并且结合各式的 LangFlow、LLaMaHub 工具，我们可以构建更智能的流程与系统。矢量数据库。AI 的火爆使得越来越多的矢量数据进入了我们的视角，也成为了非常纠结的架构造型元素 —— 因为作为工程师的我们，还没有建立一个全面的认知，也缺少评估数据。而由于 Token 很贵，我们需要管理好 token，以降低 token 的花销。我们还需要：本地小模型。如 GitHub Copilot、Bloop 借助于本地的模型来进行相关性等的计算，以在本地构建动态的 prompt，而不需要消耗服务器的资源。就地机器学习。犹如几年前，我只是因为喜欢《TinyML：基于 TensorFlow Lite 在 Arduino 和超低功耗微控制器上部署机器学习》的书名而买了这本书一样，我觉得 AI 不应该只在非消费级 GPU 上能跑，而是应该无处不在。而这些依旧只是基于现状的观察，毕竟在外挂知识库、结合知识图谱方面，我们还有大量的工作和试验仍然在进行中。高级篇：面向特定场景的 LLM 应用每个不同的通用大语言模型，受限于语料、算法、强化方式，在能力上是不同的差异。而对于现有的、开源的大语言模型来说，这种差异就更加明显了。所以，我们需要针对于不同的场景，构建适合的策略，如编程场景、智能客服场景、需求完善场景等。而由于微调后的模型是指针特定领域的，所以我们需要考虑适用于自身场景 LLM 架构方案：动态的 LoRA 加载。诸如于针对不同场景下，可以动态经过不同的 LoRA 来处理数据。通用大模型配合微调小模型。即通过一大一小的方式，由大模型给出工序，由小模型完善大模型不具备的细节能力。多模型配合。诸如于结合 ChatGPT、StableDiffusion 和 VITS 等构建轻小说应用。随着时间的推移，这方面的方案会越来越完善。3.1 特定场景的模型微调如果想利用大语言模型的能力，我们需要让它是大模型友好的，还需要构建一个工程化的模式。也就是我们在探索 API 新工序时，总结的《大语言模型友好的 API》一文中的基本思路：流程过程梳理与资产化。对资产进行“语言建模”，以适用于大模型。构建 MVP 产品，并进行试验。设计增量的指标，以引导系统演进。围绕上下文的工程化思维。持续反馈的软件工程，以完善系统准确度。而对于微调来说，主要是前半部分：DSL 化、数据工程，以将现有的数据转换为模型可用的数据，进而整合到现有的工具链中。诸如于，将系统架构图转换为 PlantUML，以这些数据微调，进而简化现有的架构呈现方式。3.2 上下文工程（prompt 工程）：LLM 应用的核心在我们探索 GitHub Copilot 的过程中，有感于 GitHub 程序员在此做的努力，于是总结了《上下文工程：基于 Github Copilot 的实时能力分析与思考》。 如何对于高效的构建全面的上下文，以让 LLM 生成更准确的结果？这便是我们在未来所要做的活动。结合上述的内容，几个潜在需要考虑的点是：结合本地小模型，就地计算上下文。诸如于 Sentence-Transformers本地 Token 计算，以计算最合适的上下文。上下文计算策略，以提供最需要的上下文。若是想充分运用大模型，我们需要控制好 Prompt，而其中的关键就是对于上下文的工程化。",
        "voteup_count": 13,
        "updated_time": "2024-04-19 20:48:59",
        "question_id": 651604939,
        "user_id": "fea2f801ab1dc87a87f8bdeb6fdb3394"
    },
    {
        "answer_id": 3473016070,
        "content": "在AI时代下，软件开发工程师最需要的能力包括创新思维与解决问题的能力、系统架构设计与优化能力、以及对新技术的学习能力和好奇心。虽然AI擅长处理标准化、重复性的任务，但对于创新性问题的解决，仍然需要人类的直觉和创造力。软件开发工程师需要培养自己面对新问题时，能够提出独特见解和创新解决方案的能力。随着系统复杂性的增加，软件开发工程师还需要具备系统架构设计与优化的能力，以应对日益复杂的软件开发需求。此外，人工智能技术的快速发展要求软件开发工程师不断学习和适应新技术，保持强烈的学习能力和好奇心，以便更好地利用AI技术提高开发效率和质量。为了实现这些能力，软件开发工程师可以通过以下几个方面来提升自己：持续学习：积极学习AI相关的知识和技术，包括但不限于机器学习、深度学习和自然语言处理等基本技能。实践应用：通过实际项目来应用所学的AI技术，比如参与或主导使用AI工具进行自动化测试、代码优化和智能推荐等项目。创新思维：鼓励创新思维，尝试将AI技术应用于解决软件开发中的新问题，如自上而下的开发模式和注释与知识管理的优化。团队合作：与具有不同专业背景的团队成员合作，共同探索AI技术在软件开发中的新应用，促进跨领域的知识交流和技术融合。通过上述方法，软件开发工程师不仅能够提升自己的核心竞争力，还能够在AI时代下更好地适应行业变化，为软件开发领域带来更多的创新和发展。在AI时代下，哪些具体的机器学习和深度学习技术对软件开发工程师来说最为关键？在AI时代下，对软件开发工程师来说最为关键的机器学习和深度学习技术主要包括：数据处理能力：软件工程师需要掌握如何让数据“说话”，即通过有效的数据处理来提取有价值的信息，这是机器学习的基础。模型选择与优化：了解如何确定理想模型，并对模型进行优化是至关重要的。这包括选择合适的算法、调整参数以提高模型性能等。算法和框架的理解：深入理解机器学习算法和理论，以及熟悉常用的机器学习框架（如Keras）是必要的。深度学习的应用：深度学习在图像、语音、自然语言处理等方面的应用将为软件赋予更强大的智能。因此，掌握深度学习在这些领域的应用对于软件开发工程师来说至关重要。数据分析和预测服务：深度学习不仅可以提高开发效率、优化软件性能、增强用户体验，还可以为开发者提供更加全面和准确的数据分析和预测服务。这意味着软件开发工程师需要具备使用深度学习进行数据分析和预测的能力。软件开发工程师在AI时代下需要掌握的关键技术和技能包括数据处理、模型选择与优化、算法和框架的理解、编程技能、深度学习的应用以及数据分析和预测服务的能力。这些技术和技能的掌握将使他们能够更好地利用机器学习和深度学习技术，推动软件开发的进步。如何有效地将AI技术应用于自动化测试、代码优化和智能推荐等项目中？有效地将AI技术应用于自动化测试、代码优化和智能推荐等项目中，首先需要理解AI在这些领域的具体应用方式及其带来的优势。以下是基于我搜索到的资料，对如何有效应用AI技术的详细分析：自动化测试：1. AI可以通过学习应用的用户行为和测试历史数据，自动生成高覆盖率的测试用例，减少人工编写测试用例的工作量。2. 通过机器学习和自然语言处理技术，AI能够分析测试需求和测试用例，生成相应的测试脚本，提高自动化测试的效率和覆盖范围。3. AI的应用还包括测试执行的自动化、测试结果的智能分析与测试报告的自动生成，这可以大幅提高测试效率。代码优化：尽管原始证据中没有直接提到AI在代码优化中的应用，但可以推断，通过机器学习和深度学习技术，AI能够分析现有代码库，识别潜在的性能瓶颈或安全漏洞，并提出改进建议。这种能力对于提高代码质量和开发效率至关重要。智能推荐:在智能推荐系统中，AI可以通过分析用户的行为模式和偏好，提供个性化的推荐内容。例如，在软件开发领域，AI可以根据开发者的历史项目和代码风格，推荐相关的工具、库或最佳实践，从而提高开发效率和质量。为了有效地应用AI技术，还需要注意以下几点：持续学习和适应：AI系统需要不断地从新的数据中学习，以保持其预测和推荐的准确性和相关性。挑战与机遇并存：虽然AI技术为自动化测试、代码优化和智能推荐带来了巨大的潜力，但在实施过程中也可能遇到挑战，如数据隐私保护、算法偏见等问题。跨学科合作：成功的AI项目往往需要软件工程师、数据科学家和业务专家之间的紧密合作，以确保技术解决方案既符合技术要求，也满足业务需求。通过深入理解AI技术在自动化测试、代码优化和智能推荐中的应用，并克服实施过程中的挑战，可以有效地利用AI技术提升项目的效率和质量。面对复杂系统架构设计与优化时，有哪些成功的案例或最佳实践可以参考？面对复杂系统架构设计与优化时，可以参考的成功案例或最佳实践包括：理解系统需求：在开始架构设计之前，深入理解系统需求是至关重要的。这有助于确保设计的系统能够满足实际需求，从而提高系统的有效性和效率。面向对象设计（OOD）：面向对象设计是一种常用的架构设计方法论，它强调使用对象来表示系统的实体和行为。这种方法有助于构建模块化、可重用和易于维护的系统。微服务架构：阿里通过10年的技术沉淀，分享了如何从零开始构建一个高效的微服务系统的方法。这包括从概念理解、设计原则、技术选型到部署维护的各个阶段，通过实际案例分析与最佳实践分享，展示了微服务架构的优势和应用。复杂系统设计原则：在处理复杂系统时，一些基本原则如职责分离、抽象分层和变化扩展是非常重要的。这些原则有助于简化系统的设计和维护，使系统更加灵活和可扩展。构建高效、稳定和可扩展的系统：系统架构设计的目标是构建高效、稳定和可扩展的系统。这需要对基本概念、原则、方法和实践有深入的理解和应用，以掌握系统架构设计的核心技能。架构设计的最佳实践：深入剖析软件架构设计的核心原理和实践方法，理解并应用架构设计的最佳实践，是构建出稳定、高效、可扩展的软件系统的关键。面对复杂系统架构设计与优化时，应深入理解系统需求，采用面向对象设计等方法论，参考微服务架构的成功案例，遵循复杂系统设计的基本原则，并掌握架构设计的最佳实践，以构建高效、稳定和可扩展的系统。在团队合作中，如何促进跨领域的知识交流和技术融合，特别是在使用AI技术的背景下？在团队合作中，促进跨领域的知识交流和技术融合，尤其是在使用AI技术的背景下，可以通过以下几个方面来实现：采用认知TRIZ方法论：认知TRIZ强调知识整合和跨学科协作的重要性，通过问题重构、利用类比和隐喻等方法，可以打开新的思路和解决方案。这种方法有助于不同领域间的深度知识整合，提升创新的深度和广度。增强式迁移学习：迁移学习允许模型将在一个任务上学到的知识应用到另一个相关但不同的任务上。通过增强式迁移学习，可以有效地共享和利用跨领域知识，解决不同领域之间数据分布差异带来的问题。建立沟通渠道：为了促进知识共享和技术交流，建立畅通的沟通渠道是必要的。可以通过定期会议、远程会议、电子邮件等方式保持沟通，并及时解决合作中的问题和困难。利用网络平台和知识图谱：网络平台和知识图谱可以帮助不同领域的专家和研究人员更好地理解和利用彼此之间的知识。通过这些工具，可以表示和管理跨领域知识，从而提高知识的共享效率。AI技术的应用：AI技术，如GPT-4，能够使团队能够快速讨论想法并更有效地协作。这种技术的应用可以提高团队的工作效率和创新能力，同时减少人为错误。扩展实施人工智能策略：通过建立新的人工智能团队，将人工智能人才与不同的部门联系起来，推动跨职能项目。这有助于实现跨领域知识的交流和技术的融合。通过采用认知TRIZ方法论、增强式迁移学习、建立沟通渠道、利用网络平台和知识图谱、应用AI技术以及扩展实施人工智能策略等方法，可以有效促进团队合作中跨领域的知识交流和技术融合。对于软件开发工程师来说，持续学习和适应新技术的过程中，有哪些有效的策略或工具推荐？对于软件开发工程师来说，持续学习和适应新技术的过程中，有效的策略或工具包括：持续学习：这是程序员适应技术发展的核心策略，因为技术领域日新月异。可以通过培训正式学习，从经验中学习，以及删除被动屏幕时间来提高学习效率。深度专研：通过深入研究特定的技术或框架，可以更好地理解和掌握它们。灵活实践：将所学知识应用于实际项目中，通过实践来加深理解。社区参与：参与开源项目、阅读优秀的代码、与他人合作，这些都是提升自己解决问题能力的有效方式。使用机器学习构建软件系统的自适应策略：利用监督学习、无监督学习、强化学习等技术，获取自适应策略，这在预先缺少领域知识时尤其有效。跨任务学习：探索在不同但相关的NLP任务上应用统一的持续学习策略，这种方法展示了在多个任务上成功应用一个统一方法的可能性。每天从计划开始：制定一个学习计划，并坚持每天执行，这是培养技能的一个重要技巧。阅读高级开发人员的代码：这是提升自己的最快方法之一，可以了解社区维护的软件包，并采用一些更好的编程实践。技术适应性：理解并实现产品、服务或系统针对各种技术环境和用户需求的适应性，这对于在多元技术环境中脱颖而出至关重要。通过上述策略和工具，软件开发工程师可以有效地持续学习和适应新技术，保持自己的竞争力。最后，祝大家在AI时代都能实现财务自由，记得给我一个赞同。@AI肝铁侠",
        "voteup_count": 6,
        "updated_time": "2024-04-21 00:02:41",
        "question_id": 651604939,
        "user_id": "3ea94d297bc58cbab0f5eb146cb493a5"
    },
    {
        "answer_id": 3481069453,
        "content": "在人工智能（AI）日益成为技术领域发展主流的今天，软件开发工程师的角色和所需能力正在经历着深刻的变化。面对新的挑战和需求，开发人员需要适应快速发展的AI技术，以保持其在职场的竞争力和创新力。今天，我们就来聊聊AI时代下，软件开发工程师需要哪些关键能力。理解和应用机器学习模型首先，掌握机器学习（ML）技术是AI时代软件工程师的核心能力。随着机器学习和深度学习技术的普及，传统的软件开发流程已经被重新定义。开发人员需要理解如何构建、训练、优化以及部署机器学习模型。熟悉像TensorFlow、PyTorch这类框架，将使开发者能够在项目中实施复杂的AI功能，从而提升产品的智能化水平。数据处理与分析能力数据是AI的血液。一个优秀的软件工程师在AI时代，必须具备强大的数据处理能力。这包括数据的采集、清洗、处理和分析。例如，有效的数据预处理可以极大提升模型的训练效率和精确度。工程师需要掌握SQL、Python等数据处理语言，同时熟悉数据可视化工具如Tableau或PowerBI，这些都是帮助他们更好地解读数据并将其转化为可行解决方案的重要技能。软件架构与系统设计随着AI技术的集成，传统的软件架构需要进行调整以支持新的功能。AI时代的软件工程师需要具备优秀的系统设计能力，能够构建支持AI技术的稳定、可扩展的软件架构。此外，云计算服务（如AWS、Google Cloud Platform和Microsoft Azure）提供了强大的机器学习和深度学习框架，了解和利用这些平台提供的服务是每一个AI时代软件工程师必备的技能。跨领域协作能力AI项目的成功往往不仅仅依赖于单一领域的专家，而是需要多领域专家的紧密合作。软件工程师在AI时代需要具备优秀的团队协作能力。他们需要能够与数据科学家、产品经理、设计师等不同背景的团队成员有效沟通，共同推动项目向前发展。有效的沟通能力和团队合作精神可以极大地提高项目的执行效率和成功率。持续学习和适应能力技术的快速迭代是当今时代的特征，尤其是在AI领域。软件工程师必须具有持续学习的意愿和能力，以跟上技术的发展步伐。他们需要定期更新自己的技能集，通过参加工作坊、在线课程和技术会议来学习最新的AI发展趋势和技术。实例分析让我们来看一个实际案例。小李是一名软件开发工程师，在一家使用AI技术提供客户服务解决方案的公司工作。随着公司决定引入更先进的自然语言处理模型来提升服务质量，小李不得不迅速学习相关的机器学习知识和框架。通过在线课程和实践，他不仅掌握了基本的模型训练方法，还对数据预处理流程有了深入理解。这使得他能够在项目中扮演更关键的角色，帮助公司在市场中获得优势。结论AI时代为软件开发工程师带来了诸多新的机遇与挑战。掌握上述关键能力，将帮助工程师们在未来的职业道路上走得更远。同时，这也提醒我们，在迈向AI的道路上，持续的学习和适应变化是每一位工程师不可或缺的素质。让我们拥抱AI，拥抱未来！",
        "voteup_count": 13,
        "updated_time": "2024-04-28 08:25:21",
        "question_id": 651604939,
        "user_id": "79dd3674f49d08aa855ad5b8c6ef9c29"
    },
    {
        "answer_id": 3463900867,
        "content": "在AI技术迅猛发展的今天，软件开发工程师面临着前所未有的挑战和机遇。AI的出现和普及，已经在一定程度上改变了软件开发的模式和流程，甚至开始承担一些基础的编程工作。那么，作为软件开发工程师，如何在这个AI时代保持自己的竞争力，甚至利用AI为自己增值，成为了许多人关心的问题。AI时代下软件开发工程师的核心竞争力1. 创新思维与解决问题的能力AI擅长处理标准化、重复性的任务，但对于创新性问题的解决，仍然需要人类的直觉和创造力。软件开发工程师需要培养自己面对新问题时，能够提出独特见解和创新解决方案的能力。2. 系统架构设计与优化能力随着系统复杂性的增加，如何设计高效、可扩展的系统架构变得越来越重要。AI可能帮助处理细节，但整体的架构设计和优化仍需工程师的专业知识和经验。3. 深度学习与AI应用能力了解AI的工作原理，尤其是深度学习，可以帮助工程师更好地利用这些工具。此外，掌握如何将AI技术应用到软件开发中，比如使用AI进行代码审查、优化等，将大大提高工作效率。4. 跨学科知识融合能力未来的软件开发不仅仅是编程，还需要对其他领域如数据科学、机器学习等有一定的了解。跨学科的知识融合能力，将帮助工程师更好地理解和应用AI技术。未来能力提升的方向1. 持续学习新技术技术日新月异，持续学习是保持竞争力的关键。除了编程语言和工具，还要关注新兴的AI技术和应用。2. 加强沟通与合作能力软件开发往往是团队工作，良好的沟通和协作能力对于项目的成功至关重要。3. 培养数据敏感性和分析能力在AI时代，数据是核心。理解和分析数据，能够帮助工程师更好地利用AI技术，提高软件质量。4. 强化安全意识和能力随着AI的应用，安全问题也日益突出。了解和防范AI带来的安全风险，是工程师必须具备的能力。AI时代对软件开发工程师提出了新的要求，但同时也带来了巨大的机遇。通过不断学习和提升，软件开发工程师不仅能够在这个时代保持竞争力，还能利用AI技术为自己的职业生涯增添新的动力。",
        "voteup_count": 6,
        "updated_time": "2024-04-12 21:21:40",
        "question_id": 651604939,
        "user_id": "2306dca94da74d22bb21249b0fd3e296"
    },
    {
        "answer_id": 3477057063,
        "content": "1、什么是AI人工智能（Artificial Intelligence，缩写为AI）是一门新的技术科学，旨在研究、开发和应用能够模拟、延伸和扩展人类智能的理论、方法和技术。AI技术包括计算机程序和算法，使机器或系统具备感知、学习、推理、决策等智能特征，从而能够执行类似人类智能的任务，甚至在某些方面超过人类。AI技术是计算机科学的一个分支， AI的应用已经渗透到医疗、金融、教育、交通、制造等多个领域和行业，对社会和经济发展产生了重要影响。2、AI技术应用目前，人工智能的应用已经深入到各个行业中，医疗行业、教育行业、零售行业、制造业行业等都在积极探索如何利用人工智能技术来提供更好的服务。例如，谷歌的人工智能算法AlphaGo在围棋比赛中战胜了李世石，引发了全球的热议；人工智能技术还被应用于医疗影像诊断、自动驾驶、智能音箱等领域。AI主要技术及相关应用领域如下。2.1、医疗领域AI 技术已逐步用于医疗影像分析、病理诊断、药物研发等方面。通过 AI 技术，医疗保健人员可以更准确地诊断疾病，从而提高治疗效果。同时， AI 技术还可以用于医院管理、医疗设备维护等方面。2.2、教育领域应用AI 技术用于在线学习、自适应教学、语音交互等方面。通过 AI 技术，教育机构可以更好地满足学生的个性化需求、提高教学效果和降低教育成本。2.3、零售业领域AI 技术用于商品推荐、库存管理、客户服务等方面。通过 AI 技术，零售企业可以更好地了解消费者的购买习惯、提高销售量和服务质量。2.4、制造业领域应用AI 技术用于生产线上的自动化、质量控制和供应链管理等方面。通过 AI 技术，制造企业可以更准确地预测市场需求、提高生产效率和降低成本。3、AI时代人们需要具备的能力随着AI技术不断普及到各行业及生活中，人们需具备的能力及要求也越来越多。3.1、适应AI能力随着AI技术的广泛应用，许多传统行业和职业可能会发生变化或消失。因此，人们需要具备较强的适应能力，能够灵活应对工作和生活环境的变化，适应新的工作环境和生活方式，包括职业转型和岗位调整，能够在不同领域和职业之间灵活转换，快速适应新技术驱动的工作流程和行业标准。面对技术带来的工作和生活变化，保持良好的心理状态。虽然说AI的出现会影响甚至取代部分人的工作，但随着AI的出现也会新增一些AI相关的岗位。如开发AI、大模型训练、算力中心运维等等，这些都需要增加相应的岗位及人员。3.2、AI技术创新能力AI时代需要人们具备创新思维，能够发现新的机会和解决方案。AI擅长数据分析和模式识别，但原创思维、跨界整合资源和提出新颖解决方案的能力是人类的核心优势。AI的发展带来了许多新的可能性，需要具备创新思维来探索这些新的机会。这不仅包括技术创新，商业模式、产品和服务的创新；还包括发现问题、提出解决方案、实验和迭代的能力。技术正在全面改变人类生产生活方式，催生新的商业模式和发展机遇。因此，创新思维将是抓住AI时代红利的关键。我们需要培养及时洞察变革趋势、解决复杂问题、打破常规思维的创新意识和能力。勇于尝试新事物、拥抱变革，并以开放的思维持续创新是成功之道。AI时代，单一的专业技能已不能满足日益复杂的工作需求。我们需要具备复合型、跨领域的综合素质。比如将专业领域知识与数据分析、系统思维、沟通协作等多种技能相结合，从而能够更好地利用AI工具解决实际问题。培养多样化的复合型技能，将使我们更有竞争力。同时随着AI技术不断发展和完善，AI需要在更多行业中进行普及和推广，更要求大家有AI的创新思维能力。3.3、AI设计能力随着AI不断普及，越来越多的行业使用到了AI，在AI时代，为了满足不同行业及应用场景需求，需要人员不断进行开发和优化。同时目前AI在各行业使用前需要进行不断的训练、推理，所以需要AI建设者拥有较好的AI设计能力，同时随着应用场景不断变化，AI也需要配合使用场景进行调整，以满足应用需求。以上种种，均需要大家有较好的AI设计能力。3.4、AI使用能力目前AI已逐步应用至各行业中，部分行业及岗位已计划使用AI替代人工进行一些基本活动，如制造行业部分工人的操作改由AI机器人替代、教育行业通过虚拟人进行授课讲解。但由于AI在各行业的应用场景不同，AI不可能自动的适应所有应用场景的需求，这就要求人们在使用过程中会涉及到相关配置的调整。同时由于目前AI在部分行业应用还不成熟，如目前较火的文生文、文生图，虽然能生成相应的文和图，但通过AI生成的文和图不一定能满足实际需求。所以在AI时代，人们需要有使用AI及相应辨别能力。3.5、人际沟通与协作能力尽管AI在许多方面都很强大，可以处理许多任务，但它仍然无法完全替代人类。因此，人际交往能力仍然是人类独有的优势，包括沟通、协作、团队建设、领导力和同理心仍然非常重要。这些能力可以帮助我们与其他人有效地合作。在团队合作中，有效地表达自己的观点，倾听他人意见，协调合作以实现共同目标。可以帮助我们更好地与AI系统合作，以及处理AI无法处理的复杂问题。4、AI未来展望AI的未来发展充满了无限可能性和挑战。相信在不久的未来，AI将继续在算法、数据处理、计算能力和模型结构等方面取得突破。多模态大模型、生成式AI等技术的发展将推动AI在文本、图像、音频和视频等多个领域的融合，使AI能够更全面地理解和处理复杂信息。让我们一起期待更美好的AI。以上案例分享自华为云社区《【云驻共创】AI时代，人们需要什么能力？》，作者：y-wolfandy。点击关注，第一时间了解华为云新鲜技术~",
        "voteup_count": 2,
        "updated_time": "2024-04-24 15:26:04",
        "question_id": 651604939,
        "user_id": "a97ebcb387aaf4dec46f5179b8a71ec9"
    },
    {
        "answer_id": 3478362607,
        "content": "自从2022年11月OpenAI发布ChatGPT以来，以大模型为代表的AI行业就热度不减。而这也对码农这个职业有了新的要求。作为一名软件开发工程师，面对AI技术的快速发展，确实需要不断提升自己的核心竞争力，以确保在职业道路上稳步前行。那么码农的核心竞争力主要体现在哪？技术熟练度与深度：熟练掌握算法、数据结构、机器学习、深度学习等，这是AI时代软件开发工程师的基本功。对算法原理有深刻的理解，能够针对业务场景，设计算法和程序。问题解决能力：具备优秀的问题分析和解决能力，能够迅速提出解决方案。善于运用逻辑思维和创造性思维来解决复杂的技术问题。团队合作能力：能够与团队成员高效协作，共同完成项目任务。在团队中发挥积极作用，促进团队成员之间的沟通与合作。出了这些，AI时代，需要掌握一些新的技术栈。比如python语言、深度学习、强化学习、自然语言处理、transformer或者pytorch框架。以大模型为例，如果软件工程师想从事大模型相关的工作，那么就需要掌握Transformer、GPT等模型结构，deepspeed，megtron等分布式训练框架。根据OpenAI联合创始人Andrej Karpathy在微软Build 2023大会上公开的信息，OpenAI使用的大模型构建流程如下图所示，主要包括四个阶段：预训练、有监督微调、Reward model训练、人工反馈强化学习。因此，如果你想从事大模型相关工作，那么你就需要熟悉掌握数据清洗、预训练、有监督微调SFT、强化学习等各种方法，这里面每一项都包含了更细的知识。比如预训练就包含了各种模型架构，有Transformer、GPT、GLM，也有最近的MOE，而更细的，Attention计算，又包含了稀疏Transformer、分组查询注意力以及FlashAttention。而SFT和强化这部分，又包括了PPO、DPO、拒绝采样等各种方法。总结而言，AI时代软件工程师，需要掌握AI相关的技术栈，而且需要不断提升自己的学习能力，掌握新知识、新技术。",
        "voteup_count": 4,
        "updated_time": "2024-04-25 17:16:31",
        "question_id": 651604939,
        "user_id": "6ab5d9817bdcadd5eeaff0ccba56c61e"
    },
    {
        "answer_id": 3477008743,
        "content": "随着人工智能 (AI) 继续塑造开发领域，开发者们正在探索一个新的前沿 —— 这并不是一个会使他们的职业生涯变得过时的领域，而是一个比以往任何时候都更需要他们的技能和直觉的领域。当然，AI 正在彻底改变软件开发，但这场革命的开始和结束都取决于开发者。因为这些工具需要有人来控制。虽然它们可以提高编码和交付的时间，但它们不能取代人类的监督和编码能力。我们最近进行了关于开发者和 AI 工具之间不断发展关系的研究，发现 AI 有潜力减轻开发者处理复杂任务的认知负担。AI 工具不仅可以像第二双手一样使用，还可以更像第二大脑一样使用，帮助开发者变得更加全面和高效。本质上，AI 可以减少心理负担，以便开发者可以专注于从学习新语言到为复杂问题创造高质量解决方案的任何事情。所以，如果你坐在这里想知道你是否应该学习如何编码，或者 AI 如何适应你当前的编码职业，我们在这里告诉你在 AI 时代你的工作需要知道什么。AI 驱动技术和工具的简史虽然围绕生成性 AI 的媒体炒作相对较新，但 AI 编码工具已经存在 —— 以某种形式 —— 比你想象的要长得多。为了让你跟上进度，这里有一份 AI 驱动工具和技术的简要时间线，它们为今天我们拥有的复杂编码工具铺平了道路：1950 年代： Autocoder 是最早的自动编码尝试之一。IBM 在 1950 年代开发了 Autocoder，它将符号语言翻译成机器代码，为早期计算机简化了编程任务。1958 年：LISP，由约翰・麦卡锡 (John McCarthy) 创建的最古老的高级编程语言之一，引入了符号处理和递归函数，为 AI 编程奠定了基础。它的灵活性和表达能力使其成为 AI 研究和开发的流行选择。（(defun factorial (n)\n   (if (<= n 1)\n       1\n       (* n (factorial (- n 1)))))这个函数用 LISP 计算非负整数 n 的阶乘。如果 n 是 0 或 1，阶乘是 1。否则，它递归地将 n 乘以 n-1 的阶乘，直到 n 达到 1。1970 年：SHRDLU，由特里・温诺格拉德 (Terry Winograd) 在麻省理工学院 (MIT) 开发，是一个早期的自然语言理解程序，能够解释并响应限制性英语子集中的命令，并展示了 AI 理解和生成人类语言的潜力。SHRDLU，在一个块状世界中操作，旨在理解和执行自然语言指令，用于操作由各种形状的块制成的虚拟对象。1980 年代：在 1980 年代，代码生成器，如 The Last One，作为可以根据用户规范或预定义模板自动生成代码的工具出现了。虽然它们在现代意义上并不严格是 AI 驱动的，但它们为后来代码生成和自动化的进步奠定了基础。\"个人电脑\" 杂志 1982 年的封面，探索了程序 The Last One。1990 年代：基于神经网络的预测模型越来越多地应用于与代码相关的任务，如预测程序行为、检测软件缺陷和分析代码质量。这些模型利用神经网络的模式识别能力，从代码示例中学习并进行预测。2000 年代：具有 AI 能力的重构工具在 2000 年代开始出现，为重构和改进代码提供了自动化帮助，而不会改变其外部行为。这些工具使用 AI 技术来分析代码模式，确定重构的机会，并向开发者建议适当的重构。这些早期的 AI 驱动编码工具帮助塑造了软件开发的演变，并为今天的 AI 驱动编码辅助和自动化工具奠定了基础，这些工具似乎每天都在不断演变。超越 IDE 的演变最初，AI 工具主要限于集成开发环境 (IDE)，帮助开发者编写和完善代码。但现在，我们开始看到 AI 触及软件开发生命周期 (SDLC) 的每一个部分，我们发现这可以提高生产力，简化协作，并加速工程团队的创新。在 2023 年对 500 名美国开发者进行的调查中，70% 的人报告说他们的工作体验到了显著的优势，而超过 80% 的人表示这些工具将促进他们团队内部的更大协作。此外，我们的研究揭示，开发者平均使用 AI 编码工具完成任务的速度提高了 55%。让我们来看看现代 AI 驱动编码工具今天的位置，以及它们提供的其中一些技术优势：代码完成和建议。像 GitHub Copilot 这样的工具使用大型语言模型 (Large Language Models, LLMs) 来分析代码上下文，并生成建议，使编码更加高效。开发者现在可以体验到显著的生产力提升，因为 AI 可以根据从开发者的代码库中学习到的上下文和模式，建议整行代码，而不仅仅是编辑器中的代码。Copilot 还利用了 GitHub 上可用的大量开源代码，以增强对各种编程语言、框架和库的理解，为开发者提供有价值的代码建议。在您的代码库中的生成式 AI。开发者可以使用像 GitHub Copilot Chat 这样的工具来提问，并实时更深入地了解他们的代码库。借助 AI 收集的遗留代码和代码库中的流程的上下文，GitHub Copilot Enterprise 可以帮助维护组织代码库中解决方案的一致性和最佳实践。自然语言处理 (NLP)。AI 最近在理解和从自然语言提示生成代码方面取得了巨大进步。想想像 ChatGPT 这样的工具，开发者可以用简单的语言描述他们的意图，AI 就会产生有价值的输出，例如可执行的代码或对代码功能的解释。AI 增强的调试。这些工具可以分析代码以寻找潜在的错误，通过利用历史数据和模式提供可能的修复方法，更有效地识别和解决错误。要使用 AI 工具，开发人员需要技术技能和软技能有两种不同的技能子集可以帮助开发者开始将 AI 工具纳入他们的开发工作流程：技术技能和软技能。拥有技术能力和人际交往能力对于开发者来说非常重要，当他们深入 AI 项目时 —— 他们需要知道他们的技术技能，使这些 AI 工具为他们带来优势，但他们也需要能够很好地与他人合作，创造性地解决问题，并理解大局，以确保他们提出的解决方案实际上符合使用它们的人们的期望。让我们首先看看那些技术技能。变得技术化Prompt 工程Prompt 工程涉及精心设计提示或指令，以指导 AI 模型的行为，产生所需的输出或响应。当 AI 驱动的编码助手没有产生有价值的输出时，可能会非常令人沮丧，但这通常可以通过调整你与 AI 的沟通方式迅速得到补救。在制作自然语言提示时，需要注意以下几点：清晰明确。制作直接且与上下文相关的提示，以更有效地引导 AI 模型。尝试和迭代。尝试不同的提示变化，并根据你收到的输出进行迭代。验证，验证，再验证。类似于你检查同事编写的代码，持续评估、分析和验证由 AI 算法生成的代码至关重要。代码审查AI 很有帮助，但它并不完美。虽然大型语言模型 (Large Language Models, LLMs) 是在大量数据上训练的，但它们并不像人类那样天生理解编程概念。因此，它们生成的代码可能包含语法错误、逻辑缺陷或其他问题。这就是为什么开发者需要依靠他们的编码能力和组织知识，以确保他们没有将有缺陷的代码推送到生产环境中。对于成功的代码审查，你可以从问自己开始：这个代码更改是否完成了它应该做的事情？从那里开始，你可以查看这个深入的检查清单，以记住审查 AI 生成的代码建议时要注意的更多事项。测试和安全有了 AI 的能力，开发者现在可以轻松地生成和自动化测试，使他们的测试职责变得不那么手动，更具战略性。为了确保由 AI 生成的测试覆盖关键功能、边缘情况和潜在漏洞，开发者需要有坚实的编程技能、测试原则和安全最佳实践的基础知识。这样，他们就能够有效地解释和分析生成的测试，识别生成的测试中潜在的局限性或偏见，并在必要时用手动测试进行补充。以下是你可以采取的一些步骤，以评估 AI 生成的测试的质量和可靠性：验证测试断言。检查 AI 生成的测试所做的断言是否可验证，并且是否与软件的预期行为一致。评估测试完整性。评估 AI 生成的测试是否覆盖了所有相关场景和边缘情况，并确定任何差距或需要额外测试以实现全面覆盖的区域。识别局限性和偏见。考虑数据偏见、算法偏见和用于测试生成的 AI 模型的局限性等因素。评估结果。调查任何测试失败或异常，以确定其根本原因和对软件的影响。对于那些刚开始编码之旅的人来说，可以查看 GitHub Learning Pathways，以深入了解使用 GitHub Actions 和 GitHub Advanced Security 进行测试策略和安全最佳实践。你还可以借助这个新的开源 Secure Code Game  来加强你的安全技能。现在，来看看软技能当开发者利用 AI 构建下一个大事件时，拥有软技能 —— 比如能够与同事很好地沟通和协作 —— 变得比以往任何时候都更加重要。让我们更深入地看看一些开发者可以专注于的软技能，因为他们继续采用 AI 工具：沟通。沟通技能对于与团队成员和利益相关者合作定义项目需求、分享见解和应对挑战至关重要。它们也很重要，因为开发者在进行提示工程时需要沟通。最好的 AI 提示是清晰、直接和经过深思熟虑的 —— 在工作场所与同事沟通也没什么不同。你知道吗，提示工程的最佳实践可能帮助你提高与同事的沟通技巧？解决问题。开发者在使用 AI 工具时可能会遇到复杂挑战或意外问题，能够创造性地思考和适应变化环境对于找到创新解决方案至关重要。适应性。AI 技术的快速发展要求开发者具有适应性，并愿意接受新工具、方法论和框架。此外，培养促进成长心态的软技能，使个人能够持续学习和保持更新，因为 AI 工具不断演变。道德思考。在 AI 开发中，道德考虑很重要，特别是关于偏见、公平性、透明度和隐私等问题。诚信和道德推理对于做出负责任的决策至关重要，这些决策优先考虑用户和社会的福祉。同理心。开发者通常为最终用户创建解决方案和产品，为了创造有价值的用户体验，开发者需要能够真正理解用户的需求和偏好。虽然 AI 可以帮助开发者更快地创建这些解决方案，通过代码生成或建议等方式，但开发者仍然需要能够测试代码，并确保这些解决方案仍然优先考虑不同用户群体的福祉。加强这些软技能最终可以增强开发者的技术专长，同时也使他们能够更有效地与同事和 AI 工具一起工作。",
        "voteup_count": 0,
        "updated_time": "2024-04-24 14:47:03",
        "question_id": 651604939,
        "user_id": "dd0cf3f9b8809033760b59336b599f6d"
    },
    {
        "answer_id": 3478004205,
        "content": "目前，我们正在经历一场伟大的革命。毫不夸张地讲，可以与蒸汽、电力革命相提并论。无数个在上世纪来看天方夜谭的事物，如今雨后春笋般出现。谁能料想到，AI横空出世，不足1分钟，就能通过几个单词创作出一篇数千字文章。为了跻身AI行业，分得一杯羹。不少大厂在相关领域投入了巨额预算，一些企业甚至重整架构，力图踩快油门，不落后于时代。与此同时，新生代力量也不容小觑。在过去的一年，不少年轻的实干家进行了诸多尝试：AI思维导图Chatmind的创始人石天放年仅23岁，团队最小成员才高中毕业。诸如虚拟引擎、图像识别等等很多新生代AI产品的背后都有00后开发者的身影。不知不觉间，风华正茂的年轻人就已吃到了AI市场的第一块蛋糕。事实上，AI行业门槛还是比较高的，想要在这个领域闯荡出成绩可谓是难上加难。那么，他们为何能在如此青涩年纪就赶上了第一趟快车？在人人恐慌被AI抢饭碗的时代，却能够薅到AI的“羊毛”？一、较强的创新思维和持续学习意愿信息革命时代，提高自身竞争实力的不二法则是：不断挑战自我，时刻保持好奇心。首先，想要紧跟时代潮流，一定要对学习饱含热情。其次，关注技术的更新迭代、重视自我能力的提升，包括沟通能力、决策能力、战略眼光等方面。只有这样才能够更好地应对创业过程中的各种挑战。零零后创业者成功的背后，是对前沿的科技趋势的熟知，是对人工智能技术的驾轻就熟。不仅如此，他们敢于挑战、勇于尝试，这种精神在AI创业中至关重要。对比来看，资历较深的人往往做事易瞻前顾后，缺乏迈出第一步的勇气。很多时候，满足于舒适圈儿、经验主义会限制我们前进的步伐。犹如温水煮青蛙般的，不愿再付出时间及精力成本学习新兴事物。二、优秀的教育背景和系统的学科知识每当一个新兴科技横空出世，都会引得众人探讨其风口在即，但真正能掌握其要领的寥寥无几。而这些零零后AI创业者，或多或少在本科/研究生阶段接受过系统的计算机科学、人工智能等相关领域的教育，具备扎实的基础理论知识。对于职场人，时间及精力都投入在工作中，接触到大多与自己差不多技术栈的人，导致很难汲取到其他领域的知识，就比如AI领域。如何不脱产还能系统学习人工智能前沿知识？海外在线硕士就是个不错的选择。点击下方链接，测试看看你的条件是否可以申请海外在线硕士：测测看，你能申请什么档次的院校比如美国史蒂文斯理工学院（Stevens) 计算机科学硕士/数据科学硕士（ MSCS/MSDS），对职场人一大利好就是申请制入学，只需要准备相应的材料即可上岸。不必应对繁琐复杂的入学考试，且无雅思托福等语言成绩要求，彼岸教育的英语面试成绩就可以作为参考。Stevens MSCS：主要为学生提供与软件开发、网络编程、移动系统和应用程序、云计算、人机交互和企业软件设计等高度需求领域相一致的课程。Stevens MSDS：帮助学生为金融科技、商业智能和分析、学术界和数据库管理以及需要强大数据分析技能的政府职位的职业做好准备。学费每年不到6万人民币，远远低于留学的花销。国内的非全日制硕士会标明“非全”，在国内大环境下很不吃香，国内的教育环境对非全硕士也存在偏见。而海外在线硕士项目毕业证书和线下获得是一致的，认可度更高。点击下方链接，下载史蒂文斯理工学院最新招生简章：点击下载三、对产品的市场需求有深刻的洞察力成功的AI创业需要对产品的市场需求有深刻洞察力。年轻人往往更了解年轻一代的消费习惯和需求，能够准确把握市场趋势，开发出符合用户需求的AI产品和服务。同时，他们善于从用户的角度出发，不断优化产品体验，提升用户满意度。无论任何产品，对于市场的分析能力都是不可或缺的。报名 Stevens 在线硕士的学员，都是怀揣着系统性学习理论知识，且了解市场更前沿需求的初衷。要知道， 院校的「投资回报率」是判断一所大学是否有价值的重要指标之一。作为全美大学投资回报率榜单中的佼佼者，Stevens 主打一个就业率高、贴近市场。Best Value Schools投资回报率最高的大学计算机科学专业中，不难发现，Stevens 位列全美第3名 （仅次于MIT和哈维穆德学院）。截自BestValue Schools官方网站《纽约时报》今年发布的入学10年毕业生薪资中位数，Stevens 排全美第7，高于哈佛、哥大、康奈尔、斯坦福等多所国际顶尖综合性高校。年轻AI创业团队往往有这样一大特点：积极热情、对新兴技术怀揣热枕。我曾采访过不少创业人士，给我留下深刻印象的一位才刚刚毕业，他笑称自己的公司并没有明文规定，每个人却都自发内卷。比如在短时间内就能完成产品构建，有的年轻有为者甚至已购置了车、房，可谓羡煞旁人。其实，这种现象在新生代创业潮中早已司空见惯，三五好友、小团队、没有条条框框的束缚......乐之者永远都会在行业中成绩斐然。如果你对人工智能领域充满猎奇心，想通过一个平台结识志同道合的伙伴，Stevens 可以称得上不二选择。不仅为职场人打造一个浓厚的氛围，你还能学到最前沿的人工智能知识。如果你没有学历提升的打算，斯坦福AI在线课程也是一个不错的选择。该课程是由斯坦福教授开发，涵盖AI领域前沿性实用性课程。你的证书是可在区块链上验证的数字证书，因此能够在简历或社交平台上分享成就，向雇主验证并传达你所获得的专业知识。",
        "voteup_count": 0,
        "updated_time": "2024-04-25 11:31:46",
        "question_id": 651604939,
        "user_id": "6b535e221f4d66ce70844caca214c8c4"
    },
    {
        "answer_id": 3476150361,
        "content": "AI时代下的软件开发工程师不仅需要具备扎实的编程基础和算法研发能力，还需要具备创新能力、复杂问题解决能力、学习能力、软技能以及对新兴技术的关注和掌握。这些能力的结合将使软件开发工程师能够在AI时代中保持竞争力并发挥重要作用。如何在软件开发中有效应用AI技术以提高创新能力和复杂问题解决能力？在软件开发中有效应用AI技术以提高创新能力和复杂问题解决能力，可以通过以下几个方面实现：自动化代码补全：利用AI工具如GitHub Copilot进行代码补全，可以显著提高开发效率，减少编写代码的时间和错误率。这些工具能够根据上下文提供智能建议，帮助开发者更快地编写代码。错误检测与优化：AI技术可以帮助开发者在编码过程中自动检测潜在的错误，并提出优化建议。这不仅可以提高代码的质量，还可以避免因错误导致的项目延误。自动化测试：通过AI技术实现的自动化测试可以大大提高软件测试的效率和覆盖率。AI可以模拟各种测试场景，快速发现软件中的缺陷，确保软件质量。代码审查：AI工具可以对代码进行智能审查，识别潜在的安全漏洞、代码规范问题等，帮助开发者改进代码质量。这种自动化的代码审查过程可以节省大量时间，同时提高代码的安全性和可维护性。生成报告和文档：AI工具如Stepsize AI能够自动生成冲刺报告和其他项目文档，这对于团队沟通和项目管理非常有帮助。这些报告提供了项目的实时更新和分析，有助于团队成员更好地理解项目进展和挑战。学习和适应：随着AI技术的发展，未来的软件开发工具将更加智能化和个性化。AI不仅可以根据开发者的习惯和偏好提供定制化的支持，还可以通过学习历史数据来不断优化其性能和准确性。总之，通过合理利用AI技术，软件开发领域可以实现更高的生产力、更好的代码质量和更快速的问题解决能力。这不仅需要开发者掌握相关的AI工具和技术，还需要持续关注AI技术的最新发展，以便及时采用新技术和方法来提升软件开发的创新能力和复杂问题解决能力。",
        "voteup_count": 9,
        "updated_time": "2024-04-23 19:46:47",
        "question_id": 651604939,
        "user_id": "671e99a6e908be8e752db32863f47211"
    },
    {
        "answer_id": 3473787310,
        "content": "现互联网大厂程序员，谈谈自己的理解。我认为在AI时代下，程序员最重要的能力是解决问题的能力和适应AI，让AI为己所用的能力。前者是程序员吃饭的能力，后者是程序员提效，适应新时代的能力。首先，聊聊解决问题的能力。所谓的解决问题的能力，指的是能够将原始的需求文档，从中分析需求，根据业务现状，技术现状设计方案，编码，测试，发布上线的全流程能力。现在的AI，难以识别复杂的需求，难以综合现状，跨部门沟通方案，难以跨系统写代码以及参与测试，仅仅是个辅助角色。这里，我将按照互联网大厂的标准研发流程，详细讲述一下，程序员在每个研发阶段，是如何发挥解决问题的能力的。标准化的研发流程，主要分为需求分析，系统设计，编码实现，测试验证，发布上线五个阶段组成。在需求分析阶段，解决问题的能力主要体现在准确完整地识别出关键需求点。面对需求文档，软件工程师需要从中梳理出用户故事，并基于用户故事抽象出关键用例，画出用例图。在系统设计阶段，解决问题的能力主要体现在针对每个关键需求点，推演出最合适的解决方案。在确定关键需求点之后，不是立即开始写代码，而是需要在写代码前想清楚解决方案。通常情况下，一个需求点都有多种方案可以解决。而怎么确定最合适的解决方案，是程序员在编码前需要重点考虑的一个问题。在我看来，方案推演到确定的过程中需要从以下几个方面进行考虑。业务实现度：考虑每个方案是否都能满足业务需求，即使在边界情况，并发情况，重复请求等非正常情况下，都不会出现异常。业务满足度需要结合业务背景具体分析，不同场景，对方案有着不同的容错性。举两个例子，产品首页上的核心模块必须采用同步的方式加载，而非核心模块可以采用一步方式加载（失败了无所谓）；发奖场景下，必须严格做好幂等，任何可能导致超发的方案均不适用。实现成本：每个方案编码实现需要的时间成本。维护成本：代码上线运行后，做业务监控，维护的成本。通常情况下，引入的下游，中间件越多，链路就越长，复杂度和维护成本也就更高。可扩展性：以后面临类似需求的时候，能够以最低的成本修改现有代码满足。程序员可以将参数配置话，以及在设计方案时沉淀通用组件来提高系统的扩展性。例如，运营会频繁调整的数据，提取为配置；发放某种奖励的时候，考虑以后发放其它奖励的可能性，沉淀发放奖励通用组件。在编码阶段，解决问题的能力主要体现在写出高质量的代码。高质量的代码，通常在可读性，严谨性，可测性以及可扩展性方面，都有着较好的考虑，在后续维护上成本更低，引发软件缺陷的概率更低。关于代码质量的思考，可以传送至我的一篇文章。https://zhuanlan.zhihu.com/p/679383953在测试阶段，解决问题的能力主要体现在配合测试人员快速排查问题，修复bug。在测试阶段，发现bug不可避免，作为程序员应该直面bug，在测试同学的帮助下，深入排查分析自己的代码，解决潜在缺陷。在发布上线阶段，解决问题的能力主要体现在做好发布三板斧。在发布之前配置好监控，梳理好对用户灰度的切流计划，遇到紧急问题的应急手段，平稳的将新功能发布上线。然后再来聊聊让AI为己所用，帮助提效的能力。虽然现阶段的AI无法直接帮我们完成开发生命周期中的一环，但是却能够帮我们很多。方案调研方面，AI能够帮助我们高效对比各中间件的特点，应用场景，从通用的角度进行多个技术选型对比，提供一些前期输入。编码方面，Ai能够帮着我们写一些通用的工具，单元测试，帮我们进行类级别的代码抽取，优化重构，生成注释。调试阶段，AI能够帮我分析代码bug，定位代码，提供解决思路。可见，整个项目开发生命周期里面，AI能做的尚且较少，与其担心被取代，不如增加自己解决问题的能力，以及用好AI的能力。",
        "voteup_count": 11,
        "updated_time": "2024-04-21 20:07:10",
        "question_id": 651604939,
        "user_id": "cb7237a0b23ea5e3dc80ea2ccb8463b9"
    },
    {
        "answer_id": 3472856033,
        "content": "AI时代，未来各行各业都将经历前所未有的变革，软件开发行业也不例外。大模型的出现，尤其是ChatGPT的横空出世，意味着AI正在或者将要从执行特定任务的“复读机”进化为具备泛化能力的“真正的人工智能”。作为程序员的我们，其实应该能感到一些些的危机和战。AI的多模态输入和输出能力正在重新定义人机交互，AI已经能够理解我们的指令，并转换输出响应的图片、声音和文字，这不仅仅是技术上的转换，而是基于深层次理解的转换。现在AI产品多以文字输入为核心，通过用户聊天界面生成各类模态数据，如文字、图片、音频和视频等。这意味着软件开发工程师的核心关注点从数据传递转向了用户需求，特别是模态内容数据的生成和跨系统模态数据的转换。进一步地，AI对程序员工作模式的冲击是显而易见的。自然语言生成代码的能力让AI在某些编程任务上超越了普通程序员。AI辅助编程工具如Github Copilot的出现，可以让程序员的部分编码工作逐渐被AI替代。程序员的职责逐渐转变为规划任务和验收结果，而具体的编码工作则由AI完成。这次AI浪潮的意义不仅在于人机交互的优化，更在于生产力的提升与替代。程序员的“研发技能”壁垒正在被打破，被AI替代的可能性逐渐增大。我作为程序员偶尔也会感到很焦虑，开始重新思考自我定位和工作方式，我们在未来必须从基础的代码翻译者转变为更高阶的逻辑规划者、架构设计者和创新者。为了更高效地驱动AI产出内容，我们还需要提升需求描述和prompt描写能力，并重新定义工作流程，将部分工作交由AI实现，如使用ChatGPT解决通用问题，使用Github Copilot提高编码效率，或使用DALL-E和Midjourney生成图片等等。AI的发展，将程序员的角色从“码农”推向了“创新者”。使用AI工具的目的不是为了减轻工作负担，而是为了调整工作重点，留出更多的时间和精力去从事更多的创新工作，从而创造出更加智能和高效的软件解决方案。未来淘汰我们的不会是AI，而是那些能够有效使用AI的人。",
        "voteup_count": 1,
        "updated_time": "2024-04-20 20:52:03",
        "question_id": 651604939,
        "user_id": "2b93b7b2dd2c18ad2a6ac2e3c2962296"
    },
    {
        "answer_id": 3454659844,
        "content": "在AI技术迅猛发展的今天，软件开发行业正经历着前所未有的变革。人工智能不仅优化了软件开发流程，还开始涉足编程领域，对软件开发工程师的角色产生了深远影响。那么，在这个AI时代，软件开发工程师应具备哪些能力以保持竞争力，又应如何提升自己以适应未来的发展呢？AI时代下的软件开发工程师核心竞争力创新能力：AI擅长处理标准化和重复性任务，但创新是人类的专利。软件开发工程师需不断探索新思路、新方法，以设计出独特的解决方案。复杂问题解决能力：AI目前还难以处理复杂、多变的软件开发问题。工程师需要具备解决这类问题的能力，这包括理解复杂系统、识别潜在风险和制定应对策略。跨学科知识：软件开发不仅是编程，还涉及项目管理、用户体验设计等多领域知识。具备跨学科知识的工程师更能适应行业需求。持续学习与适应能力：技术日新月异，持续学习是工程师不可或缺的能力。适应新技术、新工具和新方法，才能在行业中保持领先。未来能力提升方向深入理解AI技术：了解AI的工作原理，学会与之合作，将AI作为工具来提高工作效率。强化软技能：沟通、团队协作和领导力等软技能在未来将更加重要。这些能力有助于工程师在团队中发挥更大作用，提高团队效率。关注新兴技术：如量子计算、边缘计算等。这些技术的发展可能会改变软件开发的面貌，提前了解和掌握这些技术将是一大优势。强化安全意识：随着技术的发展，网络安全威胁也在增加。工程师需要加强对软件安全的理解和实践，以保护软件和数据安全。结论AI时代，软件开发工程师面临的是机遇与挑战并存。通过强化创新能力、复杂问题解决能力、跨学科知识和持续学习与适应能力，工程师不仅能在当前保持竞争力，还能为未来的发展做好准备。同时，深入理解AI技术、强化软技能、关注新兴技术和强化安全意识，将是工程师在AI时代持续进步的关键。",
        "voteup_count": 4,
        "updated_time": "2024-04-04 22:27:45",
        "question_id": 651604939,
        "user_id": "e8e75cb6985ddedb4e4f27d0a22d7c80"
    },
    {
        "answer_id": 3472948471,
        "content": "我开通 ChatGPT 4.0 已经有好几个月了，现在日常工作中成了 GPT 的重度依赖者。我身边的很多同事，都在用 Github copilot 辅助编码。我没有用 copilot，我觉得 ChatGPT 4.0 对我的工作提升更有帮助。同 ChatGPT 4.0 给我工作带来的巨大帮助相比，每月20美元的费用简直就是毛毛雨。但三月份 openAI 出了几次宕机的幺蛾子，整的我那几天工作有点紧张，因为我发现，没有 ChatGPT 的帮助，我好像不会工作了！！！后来这件事给我敲了警钟，让我重新思考，到底是我在利用 ChatGPT 提高工作效率，还是 ChatGPT 在利用我每天大量的 Prompt，不断提升它的处理精度？在后 ChatGPT 时代，一个程序员需要最需要的能力，也就是这个职业的核心竞争力。虽然一些基础的编码工作可以由 AI 完成，但我觉得，深厚的编程基础和对软件开发生命周期的全面理解仍然是必需的，这也是我认为在后 ChatGPT 时代，大学仍然需要继续专门开设计算机科学与技术这个专业的原因。掌握多种编程语言（如 Python、Java、JavaScript）和开发框架（如 React、Spring Boot）是基础，但更重要的是，程序员能够设计和实现复杂的软件系统——这包括了解算法、数据结构、软件架构和设计模式。对于一个剑道高手，了解其佩剑的长短，粗细，轻重，锋利程度，出刀的最佳角度，速度等等，对于其战绩有很大的影响。在战场上出生入死过的士兵，对于其手中的枪械也必定是了如指掌的，有些特种兵甚至能在1分钟之内，闭眼完成配枪的拆卸和安装。同样，对于程序员来说，了解机器学习基本原理，掌握数据处理、模型构建和训练的技能，也能帮助我们更高效的使用 AI 工具。我也用 ChatGPT 长达一年的时间了。我觉得 AI 可以处理规则性较强的任务，但在面对需要深度分析和创造性解决方案的复杂问题时，目前它的水平还略逊我一筹。如果将来，雇用我的单位，需要在 AI 和我之间做个二选一的话，我想我会在处理复杂问题方面，向雇主证明，我比 AI 更可靠。",
        "voteup_count": 3,
        "updated_time": "2024-04-20 22:34:28",
        "question_id": 651604939,
        "user_id": "9f04262537b33a768a0b91af03232cfd"
    },
    {
        "answer_id": 3455990209,
        "content": "看到 AI 回复答案，感觉心里有点拨凉拨凉的。还是一个程序员的思考来回复你吧！程序员到目前为止的核心竞争力是 工程化能力。可预期 AI 的编程能力会越来越强大，这个是勿容置疑。因为现在 AI 编程就是程序员自己弄出来的，上世纪90年代时候，已经有人提出人工智能涉足编程领域。出现很多问题：代码冗余，逻辑错误，死循环，脏读写 甚至自相矛盾。经过30 - 40 年发展，是的已经解决大部分问题。但依然只是辅助，为什么？关键还是工程化能力，软件建设就像工程建设一样，要一步一步去做，一环扣一环， 一楼水泥未干不能盖更高的楼层。",
        "voteup_count": 3,
        "updated_time": "2024-04-06 10:50:35",
        "question_id": 651604939,
        "user_id": "fa1e9c5405aa2485c8bbf71bd50ebade"
    },
    {
        "answer_id": 3459195318,
        "content": "在这个AI横行的时代，软件开发工程师的角色正在经历一场革命性的变化。你可能听说过，AI软件工程师Devin的诞生，这个能够自主完成软件开发整个周期的AI，从项目规划到部署，无所不能。这种“强到逆天”的能力，让一众码农们感到前所未有的压力。是的，我说的是压力，那种可能一夜之间，你的工作就被AI取代的压力。但是，我们真的应该害怕吗？或者说，我们真的应该只是害怕吗？不，我们需要的是适应，是提升，是在这个AI时代中找到自己的立足点。首先，让我们来谈谈编程能力。你可能会觉得，AI都能写代码了，我们这些工程师还有什么用？但是，别忘了，AI是人编写的。那些复杂的算法，那些精妙的逻辑，都是人类智慧的结晶。AI可以模仿，但创新的火花，只有人类才能点燃。所以，编程能力仍然是软件开发工程师的核心竞争力之一，只不过我们需要更加深入地理解代码背后的意义，更加主动地去创造，而不是简单地复制粘贴。接下来是学习能力。AI的发展速度是惊人的，新的框架、新的工具、新的编程语言层出不穷。一个优秀的软件开发工程师，必须具备快速学习新知识的能力。这不仅仅是为了不被AI取代，更是为了能够与AI合作，利用AI来提高我们的工作效率。学习，不再是学校里的事情，而是终身的事业。再来看看沟通能力。你可能会觉得，软件开发工程师不就是写代码吗？沟通能力有啥用？错！在一个项目中，沟通是至关重要的。你需要和产品经理沟通需求，和设计师沟通界面，和测试工程师沟通bug，甚至和客户沟通反馈。AI可以帮你写代码，但它不能帮你沟通。所以，沟通能力，是软件开发工程师不可或缺的软实力。最后，我们来谈谈创新能力。在这个AI时代，重复性的工作将越来越容易被机器取代。那么，什么才是不可取代的？创新！只有不断创新，才能保持竞争力。这不仅仅是开发出新的功能，更是在解决问题的过程中，找到新的方法，新的途径。创新能力，是软件开发工程师在AI时代中最宝贵的财富。所以，AI时代下，软件开发工程师最需要的能力是什么？编程能力、学习能力、沟通能力和创新能力，这四者缺一不可。我们不能被AI的威胁所吓倒，而应该拥抱变化，提升自己，在这个充满挑战的时代中，找到自己的位置。记住，AI是我们的工具，而不是我们的敌人。只有不断提升自己，我们才能在AI的浪潮中，乘风破浪，勇往直前。",
        "voteup_count": 1,
        "updated_time": "2024-04-09 06:47:23",
        "question_id": 651604939,
        "user_id": "cefef56e0c463853512bae9a8439f356"
    },
    {
        "answer_id": 3474237995,
        "content": "在AI时代，软件开发工程师的角色和所需能力确实发生了一些变化。AI虽然可以处理一些基础、重复性的工作，但人类的直觉、创造力和对复杂问题的理解仍然是AI无法替代的。因此，软件开发工程师需要培养一系列的核心竞争力，以应对AI时代的挑战。①工程师需要具备创新思维和解决问题的能力。AI擅长处理标准化和重复性的任务，但在面对创新性问题和复杂情境时，人类的直觉和创造力就显得尤为重要。工程师需要能够提出独特的见解和创新性的解决方案，以满足不断变化的市场需求。②深入理解机器学习和算法也是必不可少的。随着AI技术的不断发展，掌握并熟练运用机器学习算法和框架成为工程师的一项基本技能。这不仅包括理解不同算法的原理和应用场景，还需要能够根据实际需求选择和调整算法参数，以实现更好的性能。③系统架构设计与优化能力也是关键。随着软件系统的日益复杂，如何设计高效、可扩展的系统架构成为工程师面临的重要挑战。工程师需要具备专业的知识和经验，能够设计出既满足当前需求又具备未来扩展性的系统架构。④跨学科知识融合能力也是AI时代软件开发工程师所需的重要能力。未来的软件开发不仅仅是编程，还需要对数据科学、机器学习、业务逻辑等多个领域有深入的了解。通过跨学科的知识融合，工程师可以更好地理解和应用AI技术，从而提升软件的性能和功能。⑤在未来的发展中，软件开发工程师还需要注重提升自己的持续学习能力。AI技术日新月异，新的算法、框架和工具不断涌现。工程师需要保持好奇心和学习热情，不断更新自己的知识库，以跟上行业的发展步伐。⑥伦理和法规意识也是不可忽视的。在开发AI应用时，工程师需要考虑到伦理和法律问题，确保技术应用不侵犯用户隐私、符合相关法规，并积极承担社会责任。更多优质文章分享：二十五岁零基础转行做软件测试怎么样？顺便介绍下行业前景对测试工程师来说，学历重要吗？男生和女生，谁更适合软件测试？女孩子偷偷学好软件测试，想要年薪30w也没有很难！软件测试的岗位会越来越少吗？软件测试行业真的饱和了吗？软件测试工程师的工作可以干一辈子吗？软件测试这个行业可以干到多少岁？软件测试真实薪资到底是多少？2021年软件测试行业发展现状和前景最新解读2021年，软件测试行业趋势分析2021年，软件测试还值得学习吗？2021年软件测试必看的2大知识点：如何转自动化测试？学习软件测试好还是开发好？经验分享：我是怎样从一个0基础小白转行软件测试，拿到20k的高薪？软件测试需要学习什么？软件测试学习大纲梳理新手0基础怎么入门软件测试？（上）新手0基础怎么入门软件测试？（中）新手0基础怎么入门软件测试？（下）大部分的软件测试工程师的出路在哪里？【转载】测试工程师的职业规划和职业发展——入门篇【转载】测试工程师的职业规划和职业发展——进阶篇初入职场，要如何工作和学习？新人如何做好功能测试？功能测试的薪资最高能上多少？转行软件测试，你至少得知道这4点！给想要转行软件测试的人一些忠告小白如何快速步入测试行业如何应对软件测试工程师面试？软件测试面试时，经常被问到的3个问题，你答对了吗？9道软件测试面试题，刷掉90%的软件测试员为什么软件测试这么缺人，还有人找不到工作？为什么自学或是培训完软件测试，找不到工作？原因可能是这几种从手动测试菜鸟，到自动化测试老司机，只用了几个月，我的薪资翻了一倍从事软件测试多年，薪资一直提不上去，怎么办？同样做软件测试，为什么有人月入3k-5k，有人能拿到17-20k？除了Selenium，还有哪些优秀的自动化测试工具？一个从事软件测试10年的一些感悟，看完觉得扎心了！从事软件测试，想要转行IT其他行业，哪个行业更适合？",
        "voteup_count": 1,
        "updated_time": "2024-04-22 09:31:53",
        "question_id": 651604939,
        "user_id": "b645fe0eb35bc299e59cf063cf07499d"
    },
    {
        "answer_id": 3463338985,
        "content": "在我看来，AI时代下，软件开发工程师最需要的能力，那可不是一般的多啊。首先，得有个强大的数学功底。毕竟，AI的本质就是一堆数学模型的堆叠和优化。从线性代数到概率统计，从微积分到最优化理论，哪个不是得玩得溜溜转？没有这些基础，想要玩转AI，那简直就像是空中楼阁，毫无根基。其次，编程能力也是必不可少的。Python、R、TensorFlow、PyTorch，这些语言和框架，你得玩得转，还得玩得精。毕竟，我们的工作就是把那些高大上的数学模型用代码实现出来，让它们能够在实际应用中发挥作用。除了数学和编程，还有个很重要的能力，那就是数据分析和处理能力。AI嘛，说到底就是数据驱动的。你得能够从海量的数据中提炼出有用的信息，能够用数据来指导模型的优化和改进。没有这种能力，你的AI模型就像是个瞎子，不知道该往哪里走。我觉得最重要的能力，还是创新思维和解决问题的能力。AI是个日新月异的领域，每天都会涌现出各种各样的新问题和挑战。没有创新思维，你就无法在这个领域立足；没有解决问题的能力，你就无法在这个领域取得成功。所以说啊，AI时代下的软件开发工程师，得是个全能选手。数学、编程、数据分析、创新思维，这些能力缺一不可。当然，如果你还具备一些行业知识和实践经验，那就更好了。毕竟，AI的应用是广泛的，只有深入了解行业，才能够更好地发挥AI的作用。",
        "voteup_count": 4,
        "updated_time": "2024-04-12 12:38:47",
        "question_id": 651604939,
        "user_id": "ea5df4e1dc5489a6956454d0da288d68"
    },
    {
        "answer_id": 3478589258,
        "content": "在AI时代，软件开发工程师的角色变得更为复杂和多元，他们不仅要具备传统的编程和系统设计能力，还需要紧跟AI技术发展趋势，掌握一系列新的核心技能和素养。以下是一些AI时代下软件开发工程师最需要的关键能力：AI与机器学习知识：精通至少一种AI开发语言（如Python），并掌握诸如TensorFlow、PyTorch等主流机器学习框架的使用。理解和实践监督学习、无监督学习、强化学习等各种机器学习算法，能够针对不同应用场景设计和训练模型。数据处理与分析能力：能够熟练处理大规模数据，利用SQL、NoSQL数据库和大数据工具（如Hadoop、Spark）进行数据获取、清洗、整理和分析。AI系统架构设计：设计和实施可扩展的AI服务架构，包括云端部署、边缘计算和混合云解决方案。理解并能够实现服务化架构，如微服务，以及API设计与集成，确保AI组件与现有系统的有效连接。深度学习与计算机视觉/自然语言处理：掌握深度学习原理和技术，如卷积神经网络（CNN）、循环神经网络（RNN）及其在图像识别、语音识别、自然语言处理等领域的应用。敏捷开发与DevOps能力：实践敏捷开发方法论，参与快速迭代的产品开发流程，熟悉CI/CD（持续集成/持续部署）工具链。确保AI模型的版本控制、自动化测试、性能优化和安全更新。伦理与法规意识：了解和遵守与AI相关的伦理原则和法律法规，特别是在数据隐私、算法公平性和透明度等方面。跨界协作与沟通能力：与数据科学家、产品经理、设计师以及其他业务部门紧密合作，理解业务需求并将AI技术转化为商业价值。清晰传达技术方案与成果，具备良好的文档撰写和口头汇报技巧。终身学习和创新精神：在快速发展的AI领域保持持续学习和自我更新的动力，跟踪前沿研究成果和技术趋势，适时引入最新技术改进现有项目。AI时代的软件开发工程师需要成为复合型人才，兼具深厚的技术底蕴与宽广的视野，能够灵活应对AI带来的挑战和机遇，推动企业数字化转型与智能化升级。",
        "voteup_count": 2,
        "updated_time": "2024-04-25 20:30:17",
        "question_id": 651604939,
        "user_id": "cea68792696685d184141232706e5282"
    },
    {
        "answer_id": 3474399474,
        "content": "作为一个外行，我说下我最缺什么吧！1. 对开发行业的系统知识2. 编程思维的缺乏3.因为缺乏这些，导致我现在想把本地pycharm中写的爬虫程序放在服务器里。我不知道怎么引导chatgpt，不知道该提什么问题了。我现在每每会会想起，高中物理老师在课堂提出的问题，“同学们，你们知道什么问题最可怕吗？”“未知，未知的未知”什么叫未知的未知，比如，地球外面是什么？-这是未知的。除了暗物质还有什么物质？除了已知宇宙，下一个地方是哪里？-这个问题的下个问题怎么提出来？我现在就有这种无力感，所以想办法补充这些知识，但是不在大学那种环境，系统性的学科知识，想要建立真的好难。我自学python写的工具表格自动筛选工具资料批量下载工具小说下载工具自动合并Excel工具业绩计算器系统的展示下表格自动筛选 的效果-（这个工具我部署在阿里云服务器里了，所以只要能上网就能用）业绩计算器-（这个工具我部署在阿里云服务器里了，所以只要能上网就能用）这个没啥好说的，就是干销售都知道提成阶梯，手算起码要1分钟吧，这个3秒资料批量下载工具-下载获客资料未来我是计划把他迁移到服务器里，目前只能在我的电脑上用，换了电脑就要重新安装环境，安装工具，门槛高，很复杂。（目前迁移失败，是还有问题没解决，每晚只有2小时研究时间）其他工具最后让我装个13在2024年前，我只是个设计师 ，今年我摊牌了，我要“转行做码农”哈哈哈~写的这些工具，我花时间最多的是粘贴复制，一句完整代码没写。还是要尊重专业知识，你让我聊具体的编程思维，解决方案，我肯定不行。我只能针对具体问题，具体写出程序来实践。我自学的知识太碎片了，这也是弊端。（但是管他呢，哈哈哈哈）",
        "voteup_count": 0,
        "updated_time": "2024-04-22 11:27:02",
        "question_id": 651604939,
        "user_id": "4116e62539dd0ebd8a86733f68cf23ae"
    },
    {
        "answer_id": 3478657542,
        "content": "随着人工智能的快速发展，软件开发行业正在经历巨大的变革。AI 技术的快速应用和普及对软件开发人员的技能要求提出了新的挑战。在这个 AI 时代，小编认为软件开发人员至少要需要具备以下新技能，才能适应当前社会的发展。深度学习和机器学习深度学习和机器学习是 AI 领域的核心技术，软件开发人员需要掌握这些技能，以便能够理解和应用 AI 模型。他们需要熟悉常见的深度学习框架，如 TensorFlow 和 Pytorch， 了解数据预处理、模型选择和调优等关键步骤。此外，了解强化学习和监督学习的基本原理也是必不可少的。通过掌握这些技能，软件开发人员可以更好地应用 AI 技术来解决实际问题。数据科学和分析能力在 AI 时代，数据变得极为重要，软件开发人员需要具备数据科学和分析能力，以便能够处理和分析大量的数据。他们需要熟悉数据清洗、特征提取、数据建模等数据处理技术。此外，他们需要了解统计学和数据可视化，以便能够更好地理解和呈现数据。云计算和分布式系统随着 AI 应用的增加，云计算和分布式系统成为软件开发人员不可或缺的技能。他们需要了解云计算平台，如 AWS 和 Microsoft Azure， 以及分布式计算框架，如 Haddoop 和 Spark。了解如何在云上构建弹性、可扩展和高性能的系统是至关重要的。软件测试与质量保证软件开发人员需要更加注重软件测试与质量保证。AI 系统往往涉及大量的数据和复杂的模型，在开发和部署过程中容易出现问题。软件开发人员需要了解自动化测试和模型评估的方法，确保 AI 系统的准确定。跨学科合作和沟通能力AI 技术的应用涉及多个学科的融合，软件开发人员需要与领域专家合作，一开发解决实际问题的 AI 应用。因此，跨学科合作的沟通能力变得越发重要。软件开发人员需要具备良好的沟通技巧，能够理解领域专家的需求和意见，并于其进行有效的合作。软件开发人员需要具备这些新技能来应对快速变化的技术环境，上面介绍的这些技能，是小编个人认为需要必备的基础技能。只有不断的学习和进步，软件开发人员才能在 AI 时代中脱颖而出。",
        "voteup_count": 1,
        "updated_time": "2024-04-25 21:52:22",
        "question_id": 651604939,
        "user_id": "3a7a71f764f7548d07e61d006eb1264c"
    },
    {
        "answer_id": 3481746051,
        "content": "在 AI 时代，软件开发工程师的角色和技能需求正在发生快速变化。AI 和机器学习技术的发展使得许多传统的编程任务可以自动化，但同时也为开发人员创造了新的机遇和挑战。要在这个快速变化的环境中保持竞争力，软件开发工程师需要具备一系列核心技能，并且持续地学习和适应新技术。AI 时代软件开发工程师的核心技能编程与软件开发基础虽然一些编码工作可以由 AI 完成，但深厚的编程基础和对软件开发生命周期的全面理解仍然是必需的。掌握多种编程语言（如 Python、Java、JavaScript）和开发框架（如 React、Spring Boot）是基础，但更重要的是能够设计和实现复杂的软件系统。这包括了解算法、数据结构、软件架构和设计模式。机器学习与数据科学了解机器学习基本原理，掌握数据处理、模型构建和训练的技能越来越重要。软件开发工程师不仅需要能够使用机器学习库和框架（如 TensorFlow、PyTorch）进行开发，还应理解数据的搜集、清洗和分析过程，以便能够在项目中有效地应用 AI 技术。云计算与分布式系统当下许多应用都部署在云平台上，熟悉 AWS、Azure 或 Google Cloud 等云服务提供商的服务极为重要。了解如何设计和部署在云环境中运行的高可用性、可扩展性强的分布式系统，将是未来软件开发的关键能力之一。DevOps 与自动化DevOps 文化强调开发与运维的协作。熟悉持续集成（CI）和持续部署（CD）的工具和实践，能够自动化测试和部署流程，对提高软件开发的效率和质量至关重要。人工智能伦理与社会责任随着 AI 应用的普及，软件开发工程师需要关注 AI 技术的伦理问题，如数据隐私、算法偏见和安全性。这需要工程师不仅具备技术知识，还应有责任感和批判性思维能力，确保技术的健康发展和正面社会影响。如何避免被 AI 替代解决复杂问题：自己在抽象思维、逻辑推理和系统设计方面的技能至关重要。沟通与团队协作：在多学科团队中工作，能够有效沟通和协调资源，理解项目需求和商业目标，帮助团队达成共识和推动项目进展的能力，是 AI 难以企及的。无独有偶，ChatGPT在为企业节省工作量、降低成本的情况下，JNPF低代码平台同样也有这样的作用。JNPF通过可视化拖拉拽的模式即可快速开发出各种企业应用管理软件，如：OA协同办公、KM知识管理、CRM客户关系管理等， 由于使用大量的组件和封装的接口进行开发，使得开发效率大幅提升。强大的代码生成器可以让前后端代码一键生成！JNPF引领低代码开发模式，帮助解决 Java 项目 70% 的重复工作，让开发更多关注业务。既能快速提高效率，节省成本，同时又不失灵活性！官网：https://www.jnpfsoft.com未来能力提升建议为了在未来的职业生涯中更加成功，软件开发工程师应当：持续学习新技术：技术日新月异，定期参加在线课程、研讨会和技术会议，学习最新的编程语言和开发工具，保持自己的技术栈更新是非常必要的。培养跨领域知识：了解业务、市场和产品管理知识，能够从更宏观的角度理解和解决问题。例如，参与到 AI 驱动的产品设计和市场策略的制定中，可以提升自己的市场竞争力。增强项目和人员管理能力：管理技能同样重要，能够领导团队、管理项目进度和预算，处理客户和利益相关者的期望，这些都是提升个人职业价值的重要方面。在 AI 不断进步的今天，软件开发工程师的角色不再是单纯的编码执行者，而是需要作为技术创新者、问题解决者和战略思考者参与到更广泛的业务和技术决策中。通过不断学习和技能更新，软件开发工程师可以确保自己在 AI 时代保持不可替代的地位。",
        "voteup_count": 1,
        "updated_time": "2024-04-28 18:03:42",
        "question_id": 651604939,
        "user_id": "5b6399f650fe2c35c98d797b9c8c6401"
    },
    {
        "answer_id": 3456330719,
        "content": "在AI时代下，软件开发工程师需要具备以下几种关键能力，以适应不断变化的技术环境和市场需求：理解AI原理：首先，工程师需要了解AI的基本原理，包括机器学习、深度学习等，这样才能在项目中有效地应用AI技术。 编程技能：掌握多种编程语言，如Python、Java等，是软件开发工程师的基础。在AI领域，Python因其丰富的库和框架而尤为受欢迎。 数据处理能力：AI系统依赖大量数据。工程师需要能够处理、清洗和分析数据，确保数据质量，以便训练更准确的模型。 模型训练与优化：工程师应具备训练AI模型的能力，并能够根据项目需求调整和优化模型参数，以提高性能。 软件架构设计：在AI项目中，工程师需要设计合理的软件架构，确保系统的可扩展性、可维护性和高效性。 团队协作与沟通：AI项目往往需要跨学科团队合作。良好的沟通能力和团队协作精神对于项目的成功至关重要。 持续学习：AI技术日新月异，工程师需要保持好奇心和学习热情，不断更新自己的知识库，以跟上行业发展。 伦理和法规意识：在开发AI应用时，工程师应考虑伦理和法律问题，确保技术应用不侵犯用户隐私，符合相关法规。 通过掌握这些能力，软件开发工程师将能够在AI时代中发挥关键作用，推动技术创新和商业发展。如果你觉得这篇回答对你有所帮助，不妨点个赞支持一下，让更多人了解AI时代下软件开发工程师的重要性。同时，如果你对AI技术或软件开发感兴趣，可以关注“火猫网络”，我们专注于网站开发和小程序开发，致力于将AI技术融入现代商业解决方案中。",
        "voteup_count": 1,
        "updated_time": "2024-04-06 17:06:55",
        "question_id": 651604939,
        "user_id": "5b132bf7d6d933964d489692b7e0459a"
    },
    {
        "answer_id": 3469879308,
        "content": "在Chat GPT大火以后，我们可以看到人工智能和生成式AGI越来越受到大家的重视。从我接触的人里面，刚好又分为两拨人。第一波人就是他对于人工智能是相当悲观的，他觉得AI和GPT会逐渐的代替个人的工作，或者说他觉得他的工作没有太大的价值。还有一波人相对来说很乐观，他会积极的去探索AI和GPT这些工具，包括去考虑怎么样结合工作提升个体的工作效率，或者是再能够承担一些新的创新型的工作。在这两类人里面，对于悲观的人，并不是说人工智能出现以后你悲观，而是原来你本身以前就是一张消极和悲观的态度。类似于有完全的内驱力，不积极主动学习的人，你本来就是原来在做大量重复的工作。而对于乐观的人，你也一定要注意，不要觉得你会用了一些AI的工具，或者是说你会写一些稍微复杂一点的提示语，你就觉得你多么牛，反而你更应该觉得你大量在使用AI的时候，它逐渐的代替了你的思考，反而让你个人的思维能力在退化。那么在AI时代，对于软件工程师而言需要具备哪些能力？个人理解最核心的仍然是个人思维能力的提升和思维意识的转变，这里面的一个关键点又体现在一定要从专业的深度转变到跨领域的广度上面去。1.个体拼记忆力的时代已经过去首先第一个观点就是记忆力往往是变得越来越不值钱。 你不要觉得你记忆的东西很多，你就很厉害，对于软件开发也是一样的道理。你不要觉得你能够手写一个二叉树的搜索，你能够写一个图的遍历算法你就很厉害。这些东西往往会变成最不值钱的东西，真正值钱的是你要知道在什么样的一些问题场景下面，你应该用什么样的技术去解决。你只要确定了用这个技术，只要这个技术它是标准的，那一定是人工智能可以帮你解决，或者是帮你做完整内容输出的。这也是我常说的死记硬背没有价值，实践后形成抽象知识索引和场景应用模式才真正具备价值和核心竞争力。在AI时代知识的广度往往比深度更加重要。2. 善用AI-借助AI去拓展自己的知识广度。我们在人工智能时代怎么样去拓展我们的知识的广度呢？我拓展知识广度核心起到的一个作用仍然是对于我现实世界的问题和场景，我怎么样去跟我底层的AI的大模型、AI的大数据库去做更好的映射和匹配。在这个地方，我提两个我们需要去做的关键点。第一个关键点就是怎么样借助AI加速我们广度知识的学习。比如说你做IT行业或软件开发的，你原来只是做制造业，但是你现在要去借助智慧农业，对于农业你很多东西你不熟悉，你可以借助AI工具加速你的学习。你也可能问我说，原来不是已经有很多百度文库搜索工具，我可以学习吗？但是AI的学习它是可以基于你个人知识的现状做出针对你个体更加有针对性的渐进式的学习计划。这个能力原来的搜索引擎是不具备的，包括我们跟经常说的gpt，它本身就是一个生成式的反馈式学习模型，你可以边学边反馈内容给AI，不断的帮你调整相应的学习的计划和学习的路径。这就等于是你找了一个在你身边一直能够辅助你的老师，不断的基于你的实际情况去调整你的学习，这个是最最重要的。第二个点就是借助AI来完成底层知识的串联。我学习了这么多大量的知识以后，就是我怎么样去做好我底层知识，包括AI输出的问题，答案之间的之间的串接。这个串接相当重要，这个串接我也认为这个是AI工具使用过程中微调输出结果，整合解决结果里面最最关键的一个内容。知识和知识的之间串接，它一定是粗粒度的，我并不需要知道知识内部很详细的一些细节，我只需要知道知识前置和后置，它相应的一些索引或者是一些关键的接口，我就能够将底层的知识更好的串接，整合成我需要的一个完整输出或者是解决方案。类似我们基于AI辅助来完成一个IT解决方案的编写。我们需要基于GPT交互和多轮微调的构建思路，将需求和已有建设方案一起上传给GPT，然后要求分析思路，总结归纳，提出解决思路和关键点。通过多轮迭代交流，GPT基本上能理解编写完整技术方案的思路。在这个过程中知识和知识之间的串联和如何整合才是关键要解决的问题。以上才是我去应用AI，拓展我知识广度最最关键的两个点，当你把这个点想明白了以后，那AI就是你最高效的助手。AI可以让你快速扩展到一些新的领域，或者是创新型的领域。",
        "voteup_count": 3,
        "updated_time": "2024-04-18 09:30:55",
        "question_id": 651604939,
        "user_id": "53b2f3566b8b5dc9e40a4daf0de7edaf"
    },
    {
        "answer_id": 3458940478,
        "content": "最近有尝试过一款自动生成PPT的AI软件，总体使用下来，有下面一些感觉。首先，使用简单，只要明确知道自己的主题，或则导入本地大纲，就可以生成内容。然后，可以按照PPT主题，可以选择对应的模板，或则使用系统默认推荐的模板。其次，会自动生成文案，文案内容应该是来自某个数据库。应该也是爬取能否搜索到的最贴近的内容，然后填充进来的。最后，文案生成后，便可导出可编辑版本的PPT。可自行调整某些不合适的内容或则格式。但是，如果生成了多次以后，会发现，不论你的格式怎么变，生成的内容总体的思路都是一样的。内容上都比较空洞而不具体，全是条条框框而没有具体的应用实例，对于需要特别举例的地方，他也会空出来，用1，2,3列举出来，需要自行填充内容。所以，这些问题就意味着，需要使用者具备如下能力：1，能够清楚自己需要的逻辑，清楚自己想要PPT的叙事逻辑，从而能否自己生成大纲，或则编辑系统自动的大纲，确保内容是自己想要的。2，对于生成的文案内容的可靠性，需要有自己的判断，甄别哪些合适，哪些不合适。我觉得这也是最重要的事情，自己需要有足够的专业素养来识别。说回软件开发人员的所需要的能力，除了需要掌握熟练的所需要的专业知识，比如算法、数据结构、数学统计等，个人觉得需要如下一些技能：首先，需要共情能力，能否从使用者的角度出发，确保生成的结果是使用者的期望得到的结果。图片来自百度，如有侵权，请联系删除。其次，让AI更加的灵活，导出的结果更加的符合逻辑，而不是千篇一律的模板格式。最后，也是个人觉得最重要的，提高个人的软技能，比如沟通能力、分析问题解决问题的能力。AI可以取代很多有规律性的工作，但人的情感是复杂的，AI没有办法完全模拟个人的情感和思想。图片来自百度，如果侵权，请联系删除。",
        "voteup_count": 5,
        "updated_time": "2024-04-08 21:28:57",
        "question_id": 651604939,
        "user_id": "564291d5329dd91d3dd79f0aace8fd9d"
    },
    {
        "answer_id": 3477674222,
        "content": "已经开始使用AI辅助编程了，确实不错，虽然有时候给出的解答、代码不对，但是也会给你提供思路。有了AI的加持，程序员应该改变思维：1、效率提升，减少摸鱼，提升自己全局思考能力2、转变思维，学会提问AI；多于其他人员沟通，提升沟通协调能力3、AI不是万能的4、实践行动，AI不会都帮你做",
        "voteup_count": 1,
        "updated_time": "2024-04-25 06:43:45",
        "question_id": 651604939,
        "user_id": "92724cdd617827670364dd85b4cd50d1"
    },
    {
        "answer_id": 3477101572,
        "content": "在AI时代下，软件开发工程师需要具备以下能力：数学基础良好的数学基础，包括线性代数、概率论和统计等知识，这些对于理解和应用AI算法至关重要。编程技能熟练掌握至少一种编程语言，如Python、Java等，这些是构建AI系统的基础。熟悉数据结构和算法，这些对于提高程序的效率和可扩展性非常重要。AI专业知识深入学习机器学习和深度学习的知识，包括监督学习、无监督学习和强化学习等。了解AI模型的数学原理和算法实现，如线性回归、逻辑回归和决策树等。系统架构能力具备系统架构设计的能力，包括数据链路的设计、整体系统的架构以及前后端的衔接等。跨领域知识了解其他相关领域的知识，如心理学、图形学等，这些对于开发特定领域的AI应用非常有帮助。持续学习能力AI技术发展迅速，因此持续学习和跟进最新的技术发展非常重要。团队合作能力具备良好的团队合作能力，能够与不同背景的人员合作，共同完成复杂的AI项目。通过具备这些能力，软件开发工程师可以在AI时代中更好地适应和应对技术挑战，并在职业发展中取得更大的成功。郭全志®： 全语志言®写作武器库/全言志语®金句文案馆/山野草海®东鳞西爪集点赞收藏加关注，助你写作不迷路。",
        "voteup_count": 1,
        "updated_time": "2024-04-24 16:01:43",
        "question_id": 651604939,
        "user_id": "663488676e110d4a3ba651fdddf8b855"
    },
    {
        "answer_id": 3477090656,
        "content": "AI是未来的趋势, 软件开发工程师应该能使用AI工具处理目前的工作.",
        "voteup_count": 1,
        "updated_time": "2024-04-24 15:52:47",
        "question_id": 651604939,
        "user_id": "b76306bc2974e22e6b6ba193d66f5124"
    },
    {
        "answer_id": 3464896931,
        "content": "软件工程师在AI时代，犹如船夫驾舟于激流之中，须得有识水性之智，方能稳操胜券。其首要之能，乃是对算法之深刻理解与运用。算法者，程序之魂也，如人之有魂，方能行动自如。工程师若不通晓机器学习、深度学习等算法之原理，便是无魂之躯，难以应对时代之变迁。次之，工程师需具备数据处理之能。数据，乃AI之粮食，无数据则AI不得饱腹，更无论发挥其能。工程师若能熟练处理、分析数据，便是为AI备足粮草，使其在解决问题时能游刃有余。再者，软件工程师当有系统设计之才。AI系统复杂多变，非一般程序所能比。工程师若能设计出结构清晰、高效稳定的系统，便是为AI筑起了坚固之堡垒，使其在风雨中屹立不倒。此外，工程师还需不断学习之精神。AI日新月异，技术更新迅速，工程师若不勤于学习，便如逆水行舟，不进则退。唯有不断充实自己，方能与时俱进，不被时代所淘汰。最后，沟通协作之能亦不可或缺。AI项目往往涉及多领域、多部门，工程师若能与他人有效沟通，协同合作，便能使项目进展顺利，事半功倍。综上所述，AI时代下软件工程师最需要之能力，包括对算法之深刻理解与运用、数据处理、系统设计、不断学习之精神以及沟通协作之能。具备这些能力，方能在AI的浪潮中乘风破浪，扬帆远航。",
        "voteup_count": 2,
        "updated_time": "2024-04-13 21:20:21",
        "question_id": 651604939,
        "user_id": "b6dd89bf25406898f2af7c291df3e4b9"
    },
    {
        "answer_id": 3463610707,
        "content": "别的答主说的都很对，我就补充一点：最需要你能不被“未来的”AI忽悠的能力，以及能真正驾驭“未来的”AI的能力（这种驾驭不是靠权术，不是靠心机，而是真正的指挥能力——毕竟AI没得感情）。AI一顿操作猛如虎给你生成大几百行代码，如果不是你足够擅长的领域，你如何能决策是采用这些代码，还是下指令继续调整优化？我之所以说是未来的AI，是因为今天的AI写一些稍有点复杂的逻辑代码，想让IDE检查不出来任何语法错误的都还是寥寥无几的。今天的AI连IDE都忽悠不过去，离取代程序员还是有点距离的。那至于这种“能力”究竟是什么，大概包括但不限于知识储备的广泛、语言表达能力的精准、以及领导力思维等范畴。因为一旦AI聪明到足以以一顶多程序员的时候，以前不容易有机会当领导的你，可能未来很容易就能成为多名虚拟程序员员工的领导。“人人都是程序员领导”的口号，可能是AI编程领域的slogan，开个玩笑，但如果预言成真了也并不稀奇，这确实是个趋势。那，今天的我们，扪心自问，就足够胜任数名程序员领导的职责吗？可能也不行，但是现在还可以用“领导哪那么好当上的”来聊以自慰。未来AI足以当好员工，人类不当领导也得当的时候——我们反而更能理解现在没有能力的那些领导的内心世界了：没能力但还有PUA可用的时候，PUA尚且还能是对抗自己领导能力不足而内心惶恐的手段。未来的AI员工没有感情，压根不吃PUA那一套，再没有领导能力，将会如何？",
        "voteup_count": 1,
        "updated_time": "2024-04-12 16:16:35",
        "question_id": 651604939,
        "user_id": "49a4edb354d6a182487ca96ce9172dc2"
    },
    {
        "answer_id": 3454295634,
        "content": "哎呀，AI时代对软件开发工程师的要求可真是越来越高了。不过别担心，我给你梳理一下，主要是以下几个方面的能力：1. 编程基础首先，基础得扎实，这是工程师的看家本领。你得熟悉至少一种编程语言，比如Python、Java或者C++。而且，数据结构和算法这些基本功也得过硬，这样才能写出高效、可靠的代码。2. 机器学习与AI知识现在AI火得一塌糊涂，所以对机器学习、深度学习这些概念得有所了解。你得知道怎么用现有的AI框架，比如TensorFlow或者PyTorch，来训练模型、处理数据。如果能理解神经网络的原理，那就更棒了。3. 数据处理能力数据是AI的食粮。你得会用SQL从数据库里提取数据，还得会用Pandas、NumPy这些工具来处理和分析数据。数据清洗、特征工程这些技能也很关键，因为它们直接影响到模型的效果。4. 软件工程实践软件开发的整个流程，从需求分析到设计、编码、测试，再到部署和维护，这些你都得熟悉。敏捷开发、DevOps这些现代软件工程实践也得跟上，这样才能保证软件的快速迭代和高质量。5. 系统设计与架构在AI项目中，系统的设计和架构尤为重要。你得知道怎么设计可扩展、高性能的系统，还得考虑到系统的安全性和可维护性。对云计算和微服务架构的理解也很有帮助。6. 产品意识与用户体验作为工程师，你不仅要会写代码，还得有产品意识。这意味着你得理解用户的需求，知道怎么把技术转化为解决用户问题的产品。用户体验也很关键，你得确保软件不仅好用，还得让人用得舒服。7. 沟通与团队协作技术再牛，沟通不行也白搭。你得会和团队成员、产品经理、设计师等有效沟通。团队协作能力也很重要，因为软件开发往往是团队作战。8. 持续学习最后，但绝对不是最不重要的，就是持续学习的能力。技术更新换代快，今天流行的东西明天可能就过时了。你得保持好奇心，不断学习新技术、新方法。好了，说了这么多，希望对你有所帮助。记住，这些能力不是一蹴而就的，得慢慢积累。但只要你有决心，肯努力，一定能成为AI时代的优秀软件开发工程师。加油！",
        "voteup_count": 1,
        "updated_time": "2024-04-04 15:12:21",
        "question_id": 651604939,
        "user_id": "60b817c0a891c51c38e570e52816e280"
    },
    {
        "answer_id": 3477897266,
        "content": "随着AI时代的来临，软件开发工程师的角色也在悄然发生变化。他们不再仅仅是编写代码的行家，而是成为了拥有多方面能力的复合型人才。在AI时代下，软件开发工程师最需要的能力有哪些呢？首先，强大的编程能力是基础。无论是Python、Java还是C++，软件开发工程师都需要熟练掌握至少一门编程语言。这不仅是为了实现业务需求，更是为了在AI技术不断发展的过程中，能够迅速学习和应用新的编程语言和框架。其次，对AI技术的理解和掌握也是必不可少的。软件开发工程师需要了解机器学习、深度学习、自然语言处理等AI技术的基本原理和应用场景，以便在项目中合理选择和运用这些技术，提高项目的智能化水平。除了编程和AI技术，软件开发工程师还需要具备强大的问题解决能力。在AI项目中，往往会出现各种预料之外的问题和挑战，工程师需要迅速找到问题的根源，提出解决方案，并有效地实施这些方案。这种问题解决能力不仅要求工程师具备扎实的技术基础，还需要他们具备敏锐的观察力和丰富的实践经验。此外，团队合作和沟通能力也是软件开发工程师在AI时代不可或缺的能力。随着AI技术的普及，软件开发项目往往涉及多个领域和多个团队的合作。工程师需要能够有效地与团队成员、项目经理、产品经理等沟通，理解他们的需求和期望，同时也能够清晰地表达自己的思路和解决方案。最后，持续学习和自我驱动的能力也是AI时代下软件开发工程师的重要素质。AI技术日新月异，新的算法、框架和工具层出不穷。软件开发工程师需要保持对新技术的敏感度和好奇心，不断学习和探索，以保持自己的竞争力和适应性。综上所述，AI时代下软件开发工程师需要具备的能力包括强大的编程能力、对AI技术的理解和掌握、问题解决能力、团队合作和沟通能力以及持续学习和自我驱动的能力。这些能力的结合将使软件开发工程师在AI时代中发挥出更大的价值，推动AI技术的不断发展和应用。",
        "voteup_count": 0,
        "updated_time": "2024-04-25 10:23:56",
        "question_id": 651604939,
        "user_id": "6176efbdabab8ee196d38725ce2a54e2"
    },
    {
        "answer_id": 3477109715,
        "content": "不要被软文所骗",
        "voteup_count": 0,
        "updated_time": "2024-04-24 16:08:23",
        "question_id": 651604939,
        "user_id": "00bc2b84f86ca79185c29e879757c54a"
    },
    {
        "answer_id": 3477017293,
        "content": "我认为是将通用知识变现的能力，AI的流行意味着我们获取知识“原材料”变得更容易了（就好比拼多多可以买各行各业各种各样的低廉产品），这是一种知识特权的大革命，那接下来全民创造的大时代即将来领，意味着更多民间高手，民间专家将会诞生，所以，对于软件工程师，最大的变化就是不需要再花大量的时间精力去啃书本，实战入手AI辅助，让自己成为软件界的“手工耿”。",
        "voteup_count": 1,
        "updated_time": "2024-04-24 14:54:02",
        "question_id": 651604939,
        "user_id": "59f87f18e2646b99e542bab1cae7f70a"
    },
    {
        "answer_id": 3476975166,
        "content": "我不懂，但下面是Kimi爬了11个网页（包括知乎的这个问题的页面）之后写的……Kimi找了11篇网页……AI时代下，软件开发工程师需要具备一系列新的能力来应对技术发展和行业需求的变化。以下是一些关键能力：创新思维与解决问题的能力：AI虽然擅长处理标准化任务，但创新性问题的解决仍需人类的直觉和创造力2。系统架构设计与优化能力：随着系统复杂性的增加，工程师需要设计和优化系统架构以应对复杂的软件开发需求2。对新技术的学习能力和好奇心：AI技术的快速发展要求工程师不断学习新知识，保持强烈的学习能力和好奇心2。数据处理能力：软件工程师需要掌握如何通过有效的数据处理提取有价值的信息，这是机器学习的基础2。模型选择与优化：了解如何确定理想模型并对其进行优化，包括选择合适的算法、调整参数以提高模型性能2。算法和框架的理解：深入理解机器学习算法和理论，熟悉常用的机器学习框架（如Keras）2。深度学习的应用：掌握深度学习在图像、语音、自然语言处理等领域的应用，为软件赋予更强大的智能2。数据分析和预测服务的能力：使用深度学习进行数据分析和预测，提供全面和准确的服务2。编程技能：至少掌握一种编程语言，如Python、Java或C++，这些语言在算法训练和模型实现中非常重要389。数据库技能：熟悉SQL和NoSQL数据库，以及数据库管理系统（如MySQL、Oracle等）的使用111。操作系统和网络知识：熟悉常见操作系统和网络协议，如Windows、Linux、TCP/IP等，以便于进行故障排查和问题分析1。持续学习和适应新技术：通过培训、从经验中学习、删除被动屏幕时间来提高学习效率2。跨学科合作：与具有不同专业背景的团队成员合作，共同探索AI技术在软件开发中的新应用2。业务和技术视角：从用户和产品角度出发，深入思考业务运行机制，进行全链路的优化3。工程能力：包括快速定位问题的能力、对编程语言的熟练掌握、对分布式框架的理解等3。这些能力的提升可以通过持续学习、实践应用、创新思维和团队合作来实现2。软件开发工程师应不断适应AI时代的技术变革，以保持自身的竞争力和行业的领先地位。",
        "voteup_count": 0,
        "updated_time": "2024-04-24 14:18:41",
        "question_id": 651604939,
        "user_id": "28c68f368beb4e9aeafe9f04a004395a"
    },
    {
        "answer_id": 3477250720,
        "content": "AI时代下，软件开发工程师最需要的能力包括：编程技能：熟练掌握多种编程语言，如Python、Java等，以及相关的开发工具。数据处理能力：能够处理、清洗和分析大量数据，确保数据质量，以便训练更准确的AI模型。模型训练与优化：具备训练和优化AI模型的能力，根据项目需求调整模型参数，提高性能。创新思维和问题解决能力：能够从传统解决方案中脱离出来，开拓新的思路和方法，快速分析和解决复杂问题。跨学科综合能力：结合数学、统计学、计算机科学等多学科知识，更好地应对AI时代的挑战。团队协作与沟通能力：与其他领域的专家合作，如数据科学家、领域专家等，共同推进项目。综上所述，AI时代下的软件开发工程师需要具备多方面的能力，以应对不断变化的技术和市场环境。",
        "voteup_count": 0,
        "updated_time": "2024-04-24 17:59:08",
        "question_id": 651604939,
        "user_id": "7289c860ec4d1daf90db0eec19f93b60"
    },
    {
        "answer_id": 3477198887,
        "content": "技术进步的步伐不断加快，尤其是在人工智能（AI）领域，这既是挑战也是机遇。对于软件开发工程师来说，动态的环境不仅需要技术上的敏锐性，还需要一套核心能力，以保持其相关性和不可替代性。以下是一些有助于有效驾驭未来的关键能力和技能。终身学习： 技术行业的发展速度快得令人难以置信。新工具、新语言和新方法层出不穷。对于技术专业人员来说，适应这些变化并愿意不断学习是至关重要的。这包括随时了解行业趋势，参加研讨会、在线课程和认证计划。面对人工智能，学习人工智能本身也是有益的。在人工智能驱动的世界里，了解数据科学、机器学习算法和人工智能集成将是非常宝贵的技能。解决问题： 人工智能在自动执行重复性任务甚至分析复杂数据方面表现出色。然而，它仍然缺乏人类的抽象思维能力和解决独特问题的能力。软件开发通常需要创造性地解决问题的技能，以开发高效、创新的解决方案。解决问题能力强的工程师可以解决人工智能可能无法解决的难题。软技能： 虽然人工智能可以执行许多任务，但它仍然无法复制人与人之间的互动。沟通和团队合作等软技能在工作场所必不可少。软件工程师通常在一个团队中工作，可能需要与客户互动。能够进行有效沟通、谈判和团队合作，这些技能人工智能还远远没有掌握。创新和创造力： 人工智能可以优化流程，但创造新事物和创新仍然是人类的领域。发散思维、联系实际和提出创新解决方案的能力是人类的强项，而人工智能在这方面则比较落后。领导技能： 随着职业生涯的发展，领导力成为一项宝贵的技能。领导团队、做出战略决策、激励团队成员是人类胜过人工智能的领域。总之，虽然人工智能正在改变工作空间，但有许多技能是人工智能无法取代的。对于软件开发工程师来说，保持适应性、不断学习和磨练解决问题的技能至关重要。这些能力与软技能、创造力和领导力相结合，为专业人员提供了一个强大的工具包，使他们在人工智能驱动的世界中保持相关性和不可替代性。面对人工智能，这些技能不仅关系到生存，还关系到发展和引领变革浪潮。",
        "voteup_count": 0,
        "updated_time": "2024-04-24 17:16:44",
        "question_id": 651604939,
        "user_id": "789d2937b8907ba9253e1702f22aa206"
    }
]