[
    {
        "answer_id": 3482714543,
        "content": "Linux有个项目很好玩，我一直在关注这个项目，即便年近40也有事没事撸一遍，名字叫做Linux From Scratch。就是一种从网上直接下载源码，从头编译LINUX的安装方式。Welcome to Linux From Scratch!最新的版本为12.1，在这个项目中，罗列了一些作者认为需要构建的一些软件。3.2. 全部软件包这些软件，能够支撑一个不包含X图形化界面的Linux系统。你可以详细了解一个操作系统是如何运行的，GNU/Linux能运行起来，真的不是一个kernel就行的强烈建议每个CS学生都应该掌握的内容。另，很多人和我争论Linux套壳或者安卓套壳的问题的时候，当我拿出来LFS，所有人都闭嘴了。",
        "voteup_count": 147,
        "updated_time": "2024-04-29 15:49:57",
        "question_id": 653441206,
        "user_id": "4eb27eea1b6fdf59dde5dd4d9f5f79ff"
    },
    {
        "answer_id": 3478627221,
        "content": "建议你看看Linux内核的 git log ，每年挑一段时间的扫一眼，哪怕只看标题，这些提交就像盖大楼的一块块砖，有新提交的，也有修修补补。# 更新到昨天4/25，提交总个数。\n20:19:48 ~/kernel-mainline # git log --oneline |wc -l\n1266122或者用图形界面的工具，看看合并图有多复杂：再往下翻几页就成这样了：看到工作的复杂性了吧？而这还仅仅是一个内核，操作系统由多个组件构成，其他的也不是件轻松的事。我们平常说的“从事操作系统方面的工作”，大多是基于开源系统进行打包、二次开发，很少有从头开发的。即便这样，成功的都是凤毛麟角。",
        "voteup_count": 27,
        "updated_time": "2024-04-25 21:17:10",
        "question_id": 653441206,
        "user_id": "b9b434bd04830aac90f1f642d58ed09d"
    },
    {
        "answer_id": 3478743389,
        "content": "首先要找到一个能管理整个项目的人，这个人还要精通技术，这样的人目前国内并不存在。",
        "voteup_count": 18,
        "updated_time": "2024-04-25 23:28:37",
        "question_id": 653441206,
        "user_id": "6931573091be4bf0c556da6bb5055696"
    },
    {
        "answer_id": 3478500863,
        "content": "难度很大，主要是开发者都有脑子，不会把精力费在这种无意义的事情上面。",
        "voteup_count": 14,
        "updated_time": "2024-04-25 18:41:37",
        "question_id": 653441206,
        "user_id": "ec4f9f02dbd6845e02231d14b19dbd75"
    },
    {
        "answer_id": 3478451669,
        "content": "开发一个自己用的、用途很窄的玩具操作系统，不难。最基础的操作系统，教科书上就有。Linux就是照着他老师的Minix写的。。要开发一个有商业意义的操作系统，难于登天。首先，你要兼容无数的硬件。我最近玩SBC（开发板）就感受颇深。你不是随便买个配件插上去就能用的。这也不支持，那也不支持……其次，你需要有强大的稳定性。我们现在写程序考虑容错的因素很少，是因为操作系统都帮我们把事平了。实际情况里，要考虑的东西太多了。哪怕一个硬件连续运行3个月这种简单场景，可能本来正确的结果都会莫名其妙出错，都得做异常处理甚至重置动作。哪怕往磁盘写一个文件的过程里，中间任何一个时间点都可能断电，都可能造成数据一致性问题。想要系统稳健运行，需要做的工作真的太多了。",
        "voteup_count": 15,
        "updated_time": "2024-04-25 17:49:15",
        "question_id": 653441206,
        "user_id": "52e729413f263f5ea2d7e79101cdde02"
    },
    {
        "answer_id": 3480486110,
        "content": "现在从头开发一个OS难度远小于当初，因为网上的资料实在是太多了。但什么是OS？OS最重要的是屏蔽硬件，从头开发的OS要适配当前所有硬件，这个工作量就太大了。。。 另外OS需要生态，需要有能运行在OS上的软件，这个比适配硬件还难。国内厂商所说自研操作系统，大多是利用linux kernel，然后做些自己的定制开发，就是自研了。华为的新鸿蒙，我是指微内核那个，应该是纯自研的。小米的话，还是算了吧。。。",
        "voteup_count": 7,
        "updated_time": "2024-04-27 15:33:32",
        "question_id": 653441206,
        "user_id": "4f4cd202d9470f9e73d01ef6bb602952"
    },
    {
        "answer_id": 3473193936,
        "content": "如果你说的不是像Windows，linux这种操作系统，只是作为一个项目来写的话，非常简单，就看你愿不愿意写。最简单的操作系统只有两个字节，0xEB 0xFE，这就写完了。当然实现一个能用的操作系统也不难，你首先要明确你的操作系统中你打算实现什么功能，然后写就完了。刚巧我也在写操作系统，顺便把过程全都记录下来了。从零开始开发操作系统但如果要开发一个面向大众的操作系统，就要考虑非常多的情况，例如各种优化，实现各种新功能等，而这通常不是一个人而是一个团队，甚至几个团队，在管理上又有很高的要求，当然到了团队协作之后，代码就不能随便写了，你写的代码不只是给你自己看的，所以要经过代码审查等等。",
        "voteup_count": 7,
        "updated_time": "2024-04-21 08:42:03",
        "question_id": 653441206,
        "user_id": "918a45280100f92e7c5deb1e9f9eaff5"
    },
    {
        "answer_id": 3472796420,
        "content": "举个例子就知道了。就拿磨豆腐为例，从底层内核开始说白了就是自己找原材料，自己弄研磨方法，自己加工，自己生产。基于某些开源内核开始说白了就是什么都给你买现成的了，包括原材料，设备，厂房，配方，你只需要找人做就可以了，或者说看别人做的，买回来一块自己琢磨出来的，或者说摇尾乞怜买人家配方来做的。正常情况下，如果强调“自主”“可控”避免“卡脖子”，第一种情况才是应该走的正路。如果不强调那些，就要把这个基于什么的东西说明白，仿制不代表自研，同样是一种依赖，同样也是不可信的。",
        "voteup_count": 4,
        "updated_time": "2024-04-20 19:35:33",
        "question_id": 653441206,
        "user_id": "a65b9733bff3f5955205c15f563f041e"
    },
    {
        "answer_id": 3471850125,
        "content": "难度没多大，只是需要大量的工作量，就拿驱动来说兼容市面所有设备，阅读硬件说明书都够喝一壶的，Linux的成功也正是因为它出现在了一个好的时代，世界程序员的奉献慢慢积累起来的，你如果学过计算机科学就知道，里面没有正常人难以理解的算法，相较于数学理论物理等专业要容易的多！",
        "voteup_count": 9,
        "updated_time": "2024-04-19 20:13:15",
        "question_id": 653441206,
        "user_id": "fe71575f92d4ee97220076674ff3077a"
    },
    {
        "answer_id": 3483520538,
        "content": "[捂脸]nv的创始人黄仁勋他爸是跨国化学工程师，他妈是教师，有些家族混了几千年，初中化学都考不及格这个社会最难的是父母不愿意脚踏实地认真上课，小时候连家人都没靠谱的榜样，还指望和同学同班竞争[捂脸]老师又不是爸妈？凭啥偏袒谁薄弱的家庭教育？黄仁勋也没开发出啥操作系统，因为开发linux内核的linus老爸是芬兰共产党中央委员会委员，是一名相当活跃的共产主义者，linus从小受父亲熏陶，所以才用第一生产力把copyleft玩到极致，你以为linus只是喜欢计算机编程？微软windows系统的创始人比尔盖茨，全名威廉亨利盖茨三世，二世是世界最大的律师事务所创始人，比尔盖茨从小受熏陶，所以才用先进生产力把copyright玩到极致，你以为盖茨只是喜欢计算机编程？苹果系统macos的创始人是乔布斯说服邻居沃滋woz做的，沃兹woz的爸爸是导弹系统专家，沃兹woz从小受熏陶，你以为沃兹woz只是喜欢计算机编程？最近我女朋友还告诉我，马克思是飞利浦创始人的侄子，你细品品。",
        "voteup_count": 1,
        "updated_time": "2024-04-30 11:14:55",
        "question_id": 653441206,
        "user_id": "2441e05d37ee359deacabd88e58712bb"
    },
    {
        "answer_id": 3471678512,
        "content": "微软当年开发windows nt 用了5年，花费1.5亿美元。谷歌2016年发布Fuchsia ，2021年用于Nest Hub。",
        "voteup_count": 0,
        "updated_time": "2024-04-19 17:24:26",
        "question_id": 653441206,
        "user_id": "63581bf5d35b5001070d43af69c238ec"
    },
    {
        "answer_id": 3479190077,
        "content": "自己开发操作系统除非是学生，否则完全没有意义啊。至于你说机器人操作系统，其实现在大部分机器人没有那么强的实时性需求，你要是真上硬实时系统，Eigen 都不能用了，甚至stl貌似也会有实时性问题，那你需要c语言手撸矩阵库，等你撸出来，人家公司做的机器人说不定都能生娃了。一般直接上实时Linux+ros就满足大部分场景了。如果你确实需要实时性，建议学FPGA，绝对比搞OS简单而且效果更好。。",
        "voteup_count": 8,
        "updated_time": "2024-04-26 11:48:23",
        "question_id": 653441206,
        "user_id": "66df8681c8adf96f8256c777a2fb8859"
    },
    {
        "answer_id": 3471646356,
        "content": "机器人实时操作系统大多是单片机或者fpga来做的。一个是面向寄存器也就是cpu编程一个是面向逻辑门阵列编程都不需要操作系统。虽然也有一些简单的类操作系统框架，叫rtos但不是必须的。这单片机程序其实跟你从底层写操作系统本质上是一回事，都是直接根据cou架构来面向寄存器写程序。虽然多数用c语言但说到底还是编译成这个cpu认识的机器语言。在一个裸x86的cpu上写helloworld并不困难。",
        "voteup_count": 2,
        "updated_time": "2024-04-19 16:39:48",
        "question_id": 653441206,
        "user_id": "fd8acd5e0ee7855f125920ab6ebbe7eb"
    },
    {
        "answer_id": 3483564683,
        "content": "目前Linux内核的git仓库约2780万行代码。一个程序员一天写100行代码不错了，还不考虑修bug。这样每人每天100行抄一遍，还非常厉害的没有bug，共需要278000人日。每年约有250个工作日，则为1112人年。而实际上即使是普通业务代码，我们也有近一半（如果不是以上的话）时间在修bug。所以，在这个极简的模型里面，我们需要2200人年重写一遍linux。即，如果你能找到100名能写内核的大佬，并管理好这100名大佬（否则你可能会花1000年写1000个操作系统），你只需要22年就能闭门造车重新完全自主开发linux级别的内核了。如果竟然能找到1000名大佬，则甚至只需要练习时长2年半！你可以先从找10名大佬开始。",
        "voteup_count": 3,
        "updated_time": "2024-04-30 11:43:05",
        "question_id": 653441206,
        "user_id": "c1e7a1d10a51f17f230757c9b276e1b4"
    },
    {
        "answer_id": 3483449051,
        "content": "难度没有非常大，但是工作量非常巨大，根本不是某一个人或者是一个小团队能完成的",
        "voteup_count": 1,
        "updated_time": "2024-04-30 10:08:21",
        "question_id": 653441206,
        "user_id": "265ee42e6166f1c798629bf45b03b43e"
    },
    {
        "answer_id": 3473417356,
        "content": "不大啊，1个亿就能有生态了",
        "voteup_count": 0,
        "updated_time": "2024-04-21 12:32:20",
        "question_id": 653441206,
        "user_id": "5ab8e2c0e20d9cb0c16538c1c040071f"
    },
    {
        "answer_id": 3475667709,
        "content": "首先小米目前没有包括底层内核在内完全自主开发的商业级的完整操作系统，这里完整的意思是对标移动端的Android或者桌面端的Linux，而非嵌入式系统，小米HyperOS不算是。华为目前放出消息要发布的纯血鸿蒙HarmonyOS在不非常严格的定义下，算是自主系统（因为根据OpenHarmony的资料来看，除了小型和轻量系统用的是自研LiteOS外，标准系统用的是和Android一样的Linux内核，达不到你从内核开始全完全自主的标准），但纯血鸿蒙也还没有正式发布和商用，已经商用的HarmonyOS 4.x及以下版本也不算是完全自主的系统。而你关注的重点是不追求做一个对标Android或者Linux这样具有广泛生态的操作系统，而只是针对机器人的操作系统，这个就相对容易多了。比如上面提到的OpenHarmony的轻型或小型系统的版本，从内核到上层开发框架基本可以说是纯自研，且有一定成熟度的配套开发工具链了。因为机器人领域的操作系统在目前，还完全不用关注生态，你只需要根据OpenHarmony轻型或小型系统的文档，并研究其完全开源的源码，就可以定制一款专属于某款机器人的“纯国产自主操作系统”。虽然这也需要广泛查阅资料和学习，也是很有难度的，但这已经是一个能达到你的要求的，切实可行的路径了。所以你发现了吗，完全自主开发一套操作系统的难度有两个维度：一个是这套操作系统需要控制什么配置的硬件（比如OpenHarmony根据内存不超过1MB, 不超过128MB，超过128MB将系统版本划分为了轻量系统、小型系统、标准系统，并且标准系统目前仍然还做不到内核自研）。另一个是这套系统是否需要一个完整丰富的生态。先说前者。不超过128MB内存的系统，由于CPU、内存、外存（泛指存储芯片，可能是sd卡，硬盘等任意一种形式）的配置普遍不会很高，内核需要提供的硬件管理能力也就相应地不会很复杂，当年Linux 0.1x 内核的代码量只有1~2万行，现在的Linux 6.x版本的内核代码量已经有几千万行，前者是一个人或者一个小团队足以胜任的代码规模，后者是一个数十人或者数百人的团队也不敢保证能完全吃透的规模，这是工作量维度的难度。后者又是基于前者的基础上额外附加的，非纯技术领域的难度。如果你是要做一个机器人，你使用一个几万行代码的内核外加一些控制机器人工作的些许程序代码，就足可以作为一个产品交付了。按今天的机器人形态，并不需要这个机器人里面有海量的应用程序。你不需要这个机器人可以聊微信、听音乐、刷短视频。所以你的机器人不支持这些场景天经地义，并不会因为不能聊微信而没人用或没人买。但是一个适用于或是手机或是电脑这样的，以屏幕显示和与用户交互的输入输出为主要场景的设备，不仅需要配置很高的硬件，而且需要有很丰富的应用。高配的硬件需要千万级代码行数的内核来驱动，丰富的应用更是需要成千上万第三方开发者数以亿级代码行数的贡献，才共同成就了一个可以广为大家使用的操作系统。从零完成这种规模的操作系统开发任务，非得集齐天时地利人和三个要素才能搞定，已经不是一个单纯的技术问题了。但机器人不需要，总量10万行的操作系统内核+应用的代码量，都足以做出一个特定领域功能的小机器人。比起上面那种需要亿万行代码才真正有用的操作系统，确实是容易很多的。",
        "voteup_count": 6,
        "updated_time": "2024-04-23 12:34:51",
        "question_id": 653441206,
        "user_id": "49a4edb354d6a182487ca96ce9172dc2"
    },
    {
        "answer_id": 3482070317,
        "content": "写一个玩具操作系统不难，只需要囊括OS基本的一些功能的话，你只需要掌握了解某个处理器的微架构，熟悉这个架构的汇编，稍微懂一些基本外设的工作原理，并对基本的GNU工具链用法熟悉。实现一些简单的外设驱动实现异常及中断的处理 实现简单的内存管理实现简单的多进程实现一个简单的调度器支持内核态和用户态支持一些基本的C标准库函数支持一些基本的POSIX接口实现一个小型的文件系统实现一个简易的shell用于交互支持多核。这就OK了。这个玩具OS麻雀虽小但五脏俱全，基本囊括了操作系统最基本的需求，一个人利用业余时间在技术积累可以的情况下独自实现问题不大。但是要实现一个真正用于商业的OS，可以说需要巨大的人力资源和天量资金。几乎难于登天。",
        "voteup_count": 4,
        "updated_time": "2024-04-29 01:08:34",
        "question_id": 653441206,
        "user_id": "c0676b0f49eefc39aabe2da6745e987e"
    },
    {
        "answer_id": 3479194049,
        "content": "代码、维护的工作量太抽象，可能不好理解，我们简化一下。就做个项目排程表吧，看看谁能做出来。",
        "voteup_count": 2,
        "updated_time": "2024-04-26 11:37:12",
        "question_id": 653441206,
        "user_id": "ffa0437cacee4485f0034cc4049fce92"
    },
    {
        "answer_id": 3478495485,
        "content": "难度很大，但是只要能挣钱，华为、腾讯、阿里都能一年做出来。问题来了：钱呢？",
        "voteup_count": 2,
        "updated_time": "2024-04-25 18:34:59",
        "question_id": 653441206,
        "user_id": "5dcfe5cf0596ccb179d44feff2e6b0a9"
    },
    {
        "answer_id": 3472217394,
        "content": "如果仅仅只是实现现在已有操作系统的功能并不复杂，内核调度器连我也可以写一个，网络上也有很多这样的教程。B站有大哥用汇编写操作系统。这都表示操作系统不难，那么为什么自己不做？我觉得有这几个原因：1.市场2.稳定性3.安全4.兼容现有的软件环境5.资金这几方面都是国产操作系统大部分还是Linux内核的重要原因，想要做到与现今操作系统一样的性能，稳定，安全。需要投入大量的测试，修复人员，草草投入市场是不可能被接受的，这就带出资金问题了。但这样就是一个恶性循环了，很难再复制像Linux这样的成功案例了。同时，你做出来，用了非标准的方式或者自己定义的一套标准，现有程序员需要重新学习使用，这会让主流抗拒，因为可能你在应用层调用接口需要换一套代码。现有的应用都没办法用到你的新系统上，这不利于推广。Linux只是一个内核，内核之上还有一个外核，我们看到的直观感受都来自外核，自研的内核，还需要重新适配外核，或者重写。外核的代码量是内核的好几个量级，你觉得需要投入多少才能完整的自研一套可以方便，安全，稳定的操作系统？",
        "voteup_count": 2,
        "updated_time": "2024-04-20 08:50:04",
        "question_id": 653441206,
        "user_id": "06c7ecc0447547e2b148d7f3a88d2e57"
    },
    {
        "answer_id": 3483477768,
        "content": "要看你的目标啦。如果是学习性质的话，30天就能开发好了，毕竟有一本书叫做<<30天自制操作系统>>。。。如果是要投产于工业届，最终服务于商业化产品。那难度就指数型上涨了。随便说几点(1) 稳定性。工业届的系统动辄几个月或几年需要一直稳定运行。(2) 性能(3) 可扩展性(4) 安全性(5) 生态。要能带动一群应用开发者/驱动开发者等，在这个操作系统上玩。这需要天时地利人和的",
        "voteup_count": 1,
        "updated_time": "2024-04-30 10:28:38",
        "question_id": 653441206,
        "user_id": "6ed329925d95f54c445ee2e28f4c667f"
    },
    {
        "answer_id": 3483458528,
        "content": "完全自主开发一个操作系统，不依靠已有的核心代码，这难度，比起让你学完大学本科计算机所有基础理论课程的难度，大得多。",
        "voteup_count": 1,
        "updated_time": "2024-04-30 10:15:08",
        "question_id": 653441206,
        "user_id": "2d734333d5102de25ced6f209bb59356"
    },
    {
        "answer_id": 3483592557,
        "content": "参考纯血鸿蒙，要打通的不仅仅是自身，还有上下游的产业链，实现真正的有价值",
        "voteup_count": 0,
        "updated_time": "2024-04-30 11:50:44",
        "question_id": 653441206,
        "user_id": "bff6adc475ee87f5211fd9aa32f9bba3"
    },
    {
        "answer_id": 3483589785,
        "content": "我们鸿蒙早就做到了。觉得难，那是因为其他厂商不肯投入，反观我们华为.............",
        "voteup_count": 0,
        "updated_time": "2024-04-30 11:48:31",
        "question_id": 653441206,
        "user_id": "4aa4677e377674722b5abe5531609ba0"
    },
    {
        "answer_id": 3483588133,
        "content": "你自己从头写，写吧写吧就发现跑到linux那条路去了",
        "voteup_count": 0,
        "updated_time": "2024-04-30 11:47:10",
        "question_id": 653441206,
        "user_id": "0ecc1f04245824808849f984b7be56b2"
    },
    {
        "answer_id": 3483571424,
        "content": "专用操作系统很多年前国内就有，例如电子科技大自研的嵌入式操作系统，还有国防科技大等也做过，军事领域很多地方是自己的专用系统。通用操作系统现在国内也很多，桌面和服务器方面的操作系统像麒麟，深度，阿里龙蜥，等等很多都比你问问题时举例子的那技术强资历深。操作系统这事得考虑谁愿意投入去干，企业需要盈利，咱们自己想想有开源免费的你愿意每年出多少钱？如果能投资国内的技术开发一个自己的没问题",
        "voteup_count": 0,
        "updated_time": "2024-04-30 11:33:55",
        "question_id": 653441206,
        "user_id": "7fb3da8f23745e832668f9901a876878"
    },
    {
        "answer_id": 3483566281,
        "content": "有难度，但不是不可能，但如果把整个生态建立起来就难了，而且这个生态圈还在不断壮大，小的生态圈很难有生存的空间，当然也不一定永远会这样，而且很有可能干掉操作系统的不是另一个操作系统，而是别的什么东西，但这个东西一定是开放的，不大可能是天天鼓吹自主知识产权的什么东西。",
        "voteup_count": 0,
        "updated_time": "2024-04-30 11:30:18",
        "question_id": 653441206,
        "user_id": "f3793495a7771f2f697f66dbd877b18d"
    },
    {
        "answer_id": 3483540189,
        "content": "已经有前人走过的路径，你偏偏要从零开始，是思维有问题。",
        "voteup_count": 0,
        "updated_time": "2024-04-30 11:12:22",
        "question_id": 653441206,
        "user_id": "ec3ec34fe20eb59dae58915e8290e397"
    },
    {
        "answer_id": 3483529656,
        "content": "林纳斯开发第一个Linux版本大概就用了几个月吧。后来无数人的添砖加瓦，才成就了今天的Linux。Windows也是一样，一个人开发初始版本，成千上万人添砖加瓦。同时还历经了几十年的发展。在市场上有足够好用的产品的情况下，没人会去做这种吃力不讨好的事。最难的一点在于，不会有人为这样的项目投钱。而开发者也是要吃饭的。",
        "voteup_count": 0,
        "updated_time": "2024-04-30 11:05:02",
        "question_id": 653441206,
        "user_id": "1293f08c0fc1a69617327102b4355b48"
    },
    {
        "answer_id": 3483517209,
        "content": "一点都不难，只要宣发和公关部门足够不要脸就行了",
        "voteup_count": 0,
        "updated_time": "2024-04-30 10:56:08",
        "question_id": 653441206,
        "user_id": "125b7930d95b65d8a1e70f75aed9d44b"
    },
    {
        "answer_id": 3483485273,
        "content": "闭门造车能有什么难度，理论逻辑都是现成的。重要的是你系统做出来，有人给你适配软件 适配驱动嘛反复造轮子，这不是进步，这是倒退。",
        "voteup_count": 0,
        "updated_time": "2024-04-30 10:34:03",
        "question_id": 653441206,
        "user_id": "e6da1bc966acf74b715e3b4fc01d4bc2"
    },
    {
        "answer_id": 3483485246,
        "content": "首先，计算机没有底层内核这种东西。其次，你可以从内核开发但是你没法只内核开发。然后，你要开发必须有内核上的系统。最后难度问题比较玄学，但是你可以折腾linu反正复制粘贴就这样",
        "voteup_count": 0,
        "updated_time": "2024-04-30 10:34:02",
        "question_id": 653441206,
        "user_id": "3638c70d12038f2ec77a9b2641be4a52"
    },
    {
        "answer_id": 3483470338,
        "content": "难得从来不是技术，而是人。你在为什么而战斗，你在为什么而前进，你将遭遇难以想象的挫折和失败，但最终你将见证历史，名传千古。所以说，只有那种一根筋，有智慧，有勇气的人才能够在某一个方面有所成就。然而，想要在某一方面有成就，支援和财力往往来自另外的方向。",
        "voteup_count": 0,
        "updated_time": "2024-04-30 10:23:41",
        "question_id": 653441206,
        "user_id": "b9d48d32af99a7934c03926590e5df2b"
    },
    {
        "answer_id": 3483464324,
        "content": "开发一个叫\"操作系统\"的东西，不难。开发一个能用的，好用的，有很多人用的操作系统，难如登天。",
        "voteup_count": 0,
        "updated_time": "2024-04-30 10:19:23",
        "question_id": 653441206,
        "user_id": "fce7061b5d160405725878e5157a82b2"
    },
    {
        "answer_id": 3483406618,
        "content": "可以关注下这个项目：GitHub - asterinas/asterinas: Asterinas is a secure, fast, and general-purpose OS kernel, written in Rust and providing Linux-compatible ABI.这个项目是从零开始写了一个kernel，但是不能说完完全全是因为还是复现了一些已有的Rust现成的库。但是kernel基本的内存管理，调度管理，驱动外设，文件系统都是有实现了的。",
        "voteup_count": 0,
        "updated_time": "2024-04-30 09:36:19",
        "question_id": 653441206,
        "user_id": "fc6377ef186e9c23585bfe106ddaefbc"
    },
    {
        "answer_id": 3479149069,
        "content": "操作系统的职能主要是两部分：第一部分是管理硬件资源，第二部分是为用户提供舒服的页面抽象。第一部分：1.硬件资源的接口是非常复杂的，光机械磁盘的接口复杂到可以写成一本书的厚度，类似的设备还有CPU，内存等.2.如何利用好这些资源是另一个复杂的问题，进程管理，内存管理，磁盘管理等。每一项都是一个及其复杂的系统。第二部分：1.如何抽象出便捷好用的窗口、页面来与底层使用硬件资源配合，这些需要巨大的工作量。总结：操作系统是底层核心软件，是基础软件。无论从功能或是性能角度出发其都是重中之重，且很难有试用的场景供产品去测试，一个好的产品是需要时间来打磨的。",
        "voteup_count": 1,
        "updated_time": "2024-04-26 11:07:19",
        "question_id": 653441206,
        "user_id": "00fe332af07390aa35e5bb292926de0a"
    },
    {
        "answer_id": 3483500973,
        "content": "我大鸿蒙，早晚上pc，届时鸿蒙可以兼容windows,linux,android，ios真正做到统一万物遥遥领先",
        "voteup_count": 0,
        "updated_time": "2024-04-30 10:45:14",
        "question_id": 653441206,
        "user_id": "6575feb8952812c24320eea2d567bcaa"
    },
    {
        "answer_id": 3483584847,
        "content": "开发一个系统有什么难的？关键是这个系统所承载的生态，这才是关键！",
        "voteup_count": 0,
        "updated_time": "2024-04-30 11:44:29",
        "question_id": 653441206,
        "user_id": "873af3c42aa67b93e4bc1f4884be5153"
    },
    {
        "answer_id": 3481725524,
        "content": "从底层内核开始完全自主开发一个操作系统的难度是非常大的。这主要涉及到以下几个方面的挑战：首先，操作系统的开发需要深厚的技术积累，这包括对计算机组成原理、操作系统原理的深入理解，以及熟练掌握一门能够操作底层的编程语言。操作系统的内核需要管理硬件资源、处理中断和异常、实现进程管理、内存管理、文件系统等功能，每个模块都需要精细设计和优化。其次，操作系统的代码行数庞大，维护起来非常困难。例如，微软的IE浏览器和塞班系统的代码行数都非常多，但因为代码臃肿，对代码的维护性和扩展性造成了负面影响。因此，在保障功能的前提下，精简代码是非常重要的。此外，完全自主开发一个操作系统还需要考虑生态问题。现有的很多操作系统都是基于Linux开发的，Linux拥有庞大的用户群体和丰富的软件生态。自主开发的操作系统要想在市场上立足，就需要建立自己的生态，这需要大量的时间和资源投入。最后，操作系统的安全性也是一个重要的考虑因素。自主开发的操作系统需要确保其内核安全，防止漏洞和攻击。这需要对安全性有深入的理解和严格的测试。综上所述，从底层内核开始完全自主开发一个操作系统的难度非常大，需要深厚的技术积累、大量的时间和资源投入，以及建立自己的生态和确保安全性。尽管有这些挑战，但随着技术的发展和需求的增长，完全自主开发操作系统仍具有一定的前景和价值。",
        "voteup_count": 1,
        "updated_time": "2024-04-28 17:43:03",
        "question_id": 653441206,
        "user_id": "6da4b8c1fd1a1311f2146bdeee3676cd"
    }
]